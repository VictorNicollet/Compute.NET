// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace IntelMKL
{
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int VMLErrorCallBack(global::System.IntPtr pdefVmlErrorContext);

    public unsafe partial class DefVmlErrorContext : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 144)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int iCode;

            [FieldOffset(4)]
            internal int iIndex;

            [FieldOffset(8)]
            internal double dbA1;

            [FieldOffset(16)]
            internal double dbA2;

            [FieldOffset(24)]
            internal double dbR1;

            [FieldOffset(32)]
            internal double dbR2;

            [FieldOffset(40)]
            internal fixed sbyte cFuncName[64];

            [FieldOffset(104)]
            internal int iFuncNameLen;

            [FieldOffset(112)]
            internal double dbA1Im;

            [FieldOffset(120)]
            internal double dbA2Im;

            [FieldOffset(128)]
            internal double dbR1Im;

            [FieldOffset(136)]
            internal double dbR2Im;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_DefVmlErrorContext@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::IntelMKL.DefVmlErrorContext> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::IntelMKL.DefVmlErrorContext>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::IntelMKL.DefVmlErrorContext __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::IntelMKL.DefVmlErrorContext(native.ToPointer(), skipVTables);
        }

        internal static global::IntelMKL.DefVmlErrorContext __CreateInstance(global::IntelMKL.DefVmlErrorContext.__Internal native, bool skipVTables = false)
        {
            return new global::IntelMKL.DefVmlErrorContext(native, skipVTables);
        }

        private static void* __CopyValue(global::IntelMKL.DefVmlErrorContext.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::IntelMKL.DefVmlErrorContext.__Internal));
            *(global::IntelMKL.DefVmlErrorContext.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DefVmlErrorContext(global::IntelMKL.DefVmlErrorContext.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DefVmlErrorContext(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DefVmlErrorContext()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::IntelMKL.DefVmlErrorContext.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DefVmlErrorContext(global::IntelMKL.DefVmlErrorContext _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::IntelMKL.DefVmlErrorContext.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance) = *((global::IntelMKL.DefVmlErrorContext.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::IntelMKL.DefVmlErrorContext __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int ICode
        {
            get
            {
                return ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->iCode;
            }

            set
            {
                ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->iCode = value;
            }
        }

        public int IIndex
        {
            get
            {
                return ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->iIndex;
            }

            set
            {
                ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->iIndex = value;
            }
        }

        public double DbA1
        {
            get
            {
                return ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->dbA1;
            }

            set
            {
                ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->dbA1 = value;
            }
        }

        public double DbA2
        {
            get
            {
                return ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->dbA2;
            }

            set
            {
                ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->dbA2 = value;
            }
        }

        public double DbR1
        {
            get
            {
                return ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->dbR1;
            }

            set
            {
                ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->dbR1 = value;
            }
        }

        public double DbR2
        {
            get
            {
                return ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->dbR2;
            }

            set
            {
                ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->dbR2 = value;
            }
        }

        public sbyte[] CFuncName
        {
            get
            {
                sbyte[] __value = null;
                if (((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->cFuncName != null)
                {
                    __value = new sbyte[64];
                    for (int i = 0; i < 64; i++)
                        __value[i] = ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->cFuncName[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 64; i++)
                        ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->cFuncName[i] = value[i];
                }
            }
        }

        public int IFuncNameLen
        {
            get
            {
                return ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->iFuncNameLen;
            }

            set
            {
                ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->iFuncNameLen = value;
            }
        }

        public double DbA1Im
        {
            get
            {
                return ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->dbA1Im;
            }

            set
            {
                ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->dbA1Im = value;
            }
        }

        public double DbA2Im
        {
            get
            {
                return ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->dbA2Im;
            }

            set
            {
                ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->dbA2Im = value;
            }
        }

        public double DbR1Im
        {
            get
            {
                return ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->dbR1Im;
            }

            set
            {
                ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->dbR1Im = value;
            }
        }

        public double DbR2Im
        {
            get
            {
                return ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->dbR2Im;
            }

            set
            {
                ((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance)->dbR2Im = value;
            }
        }
    }

    public unsafe partial class mkl_vml_functions
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAbs")]
            internal static extern void VsAbs(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAbs")]
            internal static extern void VdAbs(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAbs")]
            internal static extern void VmsAbs(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAbs")]
            internal static extern void VmdAbs(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcAbs")]
            internal static extern void VcAbs(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzAbs")]
            internal static extern void VzAbs(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcAbs")]
            internal static extern void VmcAbs(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzAbs")]
            internal static extern void VmzAbs(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcArg")]
            internal static extern void VcArg(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzArg")]
            internal static extern void VzArg(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcArg")]
            internal static extern void VmcArg(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzArg")]
            internal static extern void VmzArg(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAdd")]
            internal static extern void VsAdd(int n, float[] a, float[] b, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAdd")]
            internal static extern void VdAdd(int n, double[] a, double[] b, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAdd")]
            internal static extern void VmsAdd(int n, float[] a, float[] b, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAdd")]
            internal static extern void VmdAdd(int n, double[] a, double[] b, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcAdd")]
            internal static extern void VcAdd(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] b, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzAdd")]
            internal static extern void VzAdd(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] b, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcAdd")]
            internal static extern void VmcAdd(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] b, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzAdd")]
            internal static extern void VmzAdd(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] b, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsSub")]
            internal static extern void VsSub(int n, float[] a, float[] b, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdSub")]
            internal static extern void VdSub(int n, double[] a, double[] b, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsSub")]
            internal static extern void VmsSub(int n, float[] a, float[] b, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdSub")]
            internal static extern void VmdSub(int n, double[] a, double[] b, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcSub")]
            internal static extern void VcSub(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] b, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzSub")]
            internal static extern void VzSub(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] b, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcSub")]
            internal static extern void VmcSub(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] b, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzSub")]
            internal static extern void VmzSub(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] b, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsInv")]
            internal static extern void VsInv(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdInv")]
            internal static extern void VdInv(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsInv")]
            internal static extern void VmsInv(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdInv")]
            internal static extern void VmdInv(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsSqrt")]
            internal static extern void VsSqrt(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdSqrt")]
            internal static extern void VdSqrt(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsSqrt")]
            internal static extern void VmsSqrt(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdSqrt")]
            internal static extern void VmdSqrt(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcSqrt")]
            internal static extern void VcSqrt(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzSqrt")]
            internal static extern void VzSqrt(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcSqrt")]
            internal static extern void VmcSqrt(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzSqrt")]
            internal static extern void VmzSqrt(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsInvSqrt")]
            internal static extern void VsInvSqrt(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdInvSqrt")]
            internal static extern void VdInvSqrt(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsInvSqrt")]
            internal static extern void VmsInvSqrt(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdInvSqrt")]
            internal static extern void VmdInvSqrt(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsCbrt")]
            internal static extern void VsCbrt(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdCbrt")]
            internal static extern void VdCbrt(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsCbrt")]
            internal static extern void VmsCbrt(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdCbrt")]
            internal static extern void VmdCbrt(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsInvCbrt")]
            internal static extern void VsInvCbrt(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdInvCbrt")]
            internal static extern void VdInvCbrt(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsInvCbrt")]
            internal static extern void VmsInvCbrt(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdInvCbrt")]
            internal static extern void VmdInvCbrt(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsSqr")]
            internal static extern void VsSqr(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdSqr")]
            internal static extern void VdSqr(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsSqr")]
            internal static extern void VmsSqr(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdSqr")]
            internal static extern void VmdSqr(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsExp")]
            internal static extern void VsExp(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdExp")]
            internal static extern void VdExp(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsExp")]
            internal static extern void VmsExp(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdExp")]
            internal static extern void VmdExp(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcExp")]
            internal static extern void VcExp(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzExp")]
            internal static extern void VzExp(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcExp")]
            internal static extern void VmcExp(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzExp")]
            internal static extern void VmzExp(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsExp2")]
            internal static extern void VsExp2(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdExp2")]
            internal static extern void VdExp2(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsExp2")]
            internal static extern void VmsExp2(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdExp2")]
            internal static extern void VmdExp2(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsExp10")]
            internal static extern void VsExp10(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdExp10")]
            internal static extern void VdExp10(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsExp10")]
            internal static extern void VmsExp10(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdExp10")]
            internal static extern void VmdExp10(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsExpm1")]
            internal static extern void VsExpm1(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdExpm1")]
            internal static extern void VdExpm1(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsExpm1")]
            internal static extern void VmsExpm1(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdExpm1")]
            internal static extern void VmdExpm1(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsLn")]
            internal static extern void VsLn(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdLn")]
            internal static extern void VdLn(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsLn")]
            internal static extern void VmsLn(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdLn")]
            internal static extern void VmdLn(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcLn")]
            internal static extern void VcLn(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzLn")]
            internal static extern void VzLn(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcLn")]
            internal static extern void VmcLn(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzLn")]
            internal static extern void VmzLn(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsLog2")]
            internal static extern void VsLog2(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdLog2")]
            internal static extern void VdLog2(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsLog2")]
            internal static extern void VmsLog2(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdLog2")]
            internal static extern void VmdLog2(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsLog10")]
            internal static extern void VsLog10(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdLog10")]
            internal static extern void VdLog10(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsLog10")]
            internal static extern void VmsLog10(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdLog10")]
            internal static extern void VmdLog10(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcLog10")]
            internal static extern void VcLog10(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzLog10")]
            internal static extern void VzLog10(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcLog10")]
            internal static extern void VmcLog10(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzLog10")]
            internal static extern void VmzLog10(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsLog1p")]
            internal static extern void VsLog1p(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdLog1p")]
            internal static extern void VdLog1p(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsLog1p")]
            internal static extern void VmsLog1p(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdLog1p")]
            internal static extern void VmdLog1p(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsLogb")]
            internal static extern void VsLogb(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdLogb")]
            internal static extern void VdLogb(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsLogb")]
            internal static extern void VmsLogb(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdLogb")]
            internal static extern void VmdLogb(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsCos")]
            internal static extern void VsCos(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdCos")]
            internal static extern void VdCos(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsCos")]
            internal static extern void VmsCos(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdCos")]
            internal static extern void VmdCos(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcCos")]
            internal static extern void VcCos(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzCos")]
            internal static extern void VzCos(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcCos")]
            internal static extern void VmcCos(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzCos")]
            internal static extern void VmzCos(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsSin")]
            internal static extern void VsSin(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdSin")]
            internal static extern void VdSin(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsSin")]
            internal static extern void VmsSin(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdSin")]
            internal static extern void VmdSin(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcSin")]
            internal static extern void VcSin(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzSin")]
            internal static extern void VzSin(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcSin")]
            internal static extern void VmcSin(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzSin")]
            internal static extern void VmzSin(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsTan")]
            internal static extern void VsTan(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdTan")]
            internal static extern void VdTan(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsTan")]
            internal static extern void VmsTan(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdTan")]
            internal static extern void VmdTan(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcTan")]
            internal static extern void VcTan(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzTan")]
            internal static extern void VzTan(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcTan")]
            internal static extern void VmcTan(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzTan")]
            internal static extern void VmzTan(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsCospi")]
            internal static extern void VsCospi(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdCospi")]
            internal static extern void VdCospi(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsCospi")]
            internal static extern void VmsCospi(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdCospi")]
            internal static extern void VmdCospi(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsSinpi")]
            internal static extern void VsSinpi(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdSinpi")]
            internal static extern void VdSinpi(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsSinpi")]
            internal static extern void VmsSinpi(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdSinpi")]
            internal static extern void VmdSinpi(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsTanpi")]
            internal static extern void VsTanpi(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdTanpi")]
            internal static extern void VdTanpi(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsTanpi")]
            internal static extern void VmsTanpi(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdTanpi")]
            internal static extern void VmdTanpi(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsCosd")]
            internal static extern void VsCosd(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdCosd")]
            internal static extern void VdCosd(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsCosd")]
            internal static extern void VmsCosd(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdCosd")]
            internal static extern void VmdCosd(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsSind")]
            internal static extern void VsSind(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdSind")]
            internal static extern void VdSind(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsSind")]
            internal static extern void VmsSind(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdSind")]
            internal static extern void VmdSind(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsTand")]
            internal static extern void VsTand(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdTand")]
            internal static extern void VdTand(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsTand")]
            internal static extern void VmsTand(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdTand")]
            internal static extern void VmdTand(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsCosh")]
            internal static extern void VsCosh(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdCosh")]
            internal static extern void VdCosh(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsCosh")]
            internal static extern void VmsCosh(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdCosh")]
            internal static extern void VmdCosh(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcCosh")]
            internal static extern void VcCosh(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzCosh")]
            internal static extern void VzCosh(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcCosh")]
            internal static extern void VmcCosh(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzCosh")]
            internal static extern void VmzCosh(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsSinh")]
            internal static extern void VsSinh(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdSinh")]
            internal static extern void VdSinh(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsSinh")]
            internal static extern void VmsSinh(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdSinh")]
            internal static extern void VmdSinh(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcSinh")]
            internal static extern void VcSinh(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzSinh")]
            internal static extern void VzSinh(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcSinh")]
            internal static extern void VmcSinh(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzSinh")]
            internal static extern void VmzSinh(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsTanh")]
            internal static extern void VsTanh(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdTanh")]
            internal static extern void VdTanh(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsTanh")]
            internal static extern void VmsTanh(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdTanh")]
            internal static extern void VmdTanh(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcTanh")]
            internal static extern void VcTanh(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzTanh")]
            internal static extern void VzTanh(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcTanh")]
            internal static extern void VmcTanh(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzTanh")]
            internal static extern void VmzTanh(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAcos")]
            internal static extern void VsAcos(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAcos")]
            internal static extern void VdAcos(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAcos")]
            internal static extern void VmsAcos(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAcos")]
            internal static extern void VmdAcos(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcAcos")]
            internal static extern void VcAcos(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzAcos")]
            internal static extern void VzAcos(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcAcos")]
            internal static extern void VmcAcos(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzAcos")]
            internal static extern void VmzAcos(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAsin")]
            internal static extern void VsAsin(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAsin")]
            internal static extern void VdAsin(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAsin")]
            internal static extern void VmsAsin(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAsin")]
            internal static extern void VmdAsin(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcAsin")]
            internal static extern void VcAsin(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzAsin")]
            internal static extern void VzAsin(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcAsin")]
            internal static extern void VmcAsin(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzAsin")]
            internal static extern void VmzAsin(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAtan")]
            internal static extern void VsAtan(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAtan")]
            internal static extern void VdAtan(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAtan")]
            internal static extern void VmsAtan(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAtan")]
            internal static extern void VmdAtan(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcAtan")]
            internal static extern void VcAtan(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzAtan")]
            internal static extern void VzAtan(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcAtan")]
            internal static extern void VmcAtan(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzAtan")]
            internal static extern void VmzAtan(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAcospi")]
            internal static extern void VsAcospi(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAcospi")]
            internal static extern void VdAcospi(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAcospi")]
            internal static extern void VmsAcospi(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAcospi")]
            internal static extern void VmdAcospi(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAsinpi")]
            internal static extern void VsAsinpi(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAsinpi")]
            internal static extern void VdAsinpi(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAsinpi")]
            internal static extern void VmsAsinpi(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAsinpi")]
            internal static extern void VmdAsinpi(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAtanpi")]
            internal static extern void VsAtanpi(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAtanpi")]
            internal static extern void VdAtanpi(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAtanpi")]
            internal static extern void VmsAtanpi(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAtanpi")]
            internal static extern void VmdAtanpi(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAcosh")]
            internal static extern void VsAcosh(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAcosh")]
            internal static extern void VdAcosh(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAcosh")]
            internal static extern void VmsAcosh(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAcosh")]
            internal static extern void VmdAcosh(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcAcosh")]
            internal static extern void VcAcosh(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzAcosh")]
            internal static extern void VzAcosh(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcAcosh")]
            internal static extern void VmcAcosh(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzAcosh")]
            internal static extern void VmzAcosh(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAsinh")]
            internal static extern void VsAsinh(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAsinh")]
            internal static extern void VdAsinh(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAsinh")]
            internal static extern void VmsAsinh(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAsinh")]
            internal static extern void VmdAsinh(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcAsinh")]
            internal static extern void VcAsinh(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzAsinh")]
            internal static extern void VzAsinh(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcAsinh")]
            internal static extern void VmcAsinh(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzAsinh")]
            internal static extern void VmzAsinh(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAtanh")]
            internal static extern void VsAtanh(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAtanh")]
            internal static extern void VdAtanh(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAtanh")]
            internal static extern void VmsAtanh(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAtanh")]
            internal static extern void VmdAtanh(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcAtanh")]
            internal static extern void VcAtanh(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzAtanh")]
            internal static extern void VzAtanh(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcAtanh")]
            internal static extern void VmcAtanh(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzAtanh")]
            internal static extern void VmzAtanh(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsErf")]
            internal static extern void VsErf(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdErf")]
            internal static extern void VdErf(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsErf")]
            internal static extern void VmsErf(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdErf")]
            internal static extern void VmdErf(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsErfInv")]
            internal static extern void VsErfInv(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdErfInv")]
            internal static extern void VdErfInv(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsErfInv")]
            internal static extern void VmsErfInv(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdErfInv")]
            internal static extern void VmdErfInv(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsHypot")]
            internal static extern void VsHypot(int n, float[] a, float[] b, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdHypot")]
            internal static extern void VdHypot(int n, double[] a, double[] b, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsHypot")]
            internal static extern void VmsHypot(int n, float[] a, float[] b, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdHypot")]
            internal static extern void VmdHypot(int n, double[] a, double[] b, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsErfc")]
            internal static extern void VsErfc(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdErfc")]
            internal static extern void VdErfc(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsErfc")]
            internal static extern void VmsErfc(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdErfc")]
            internal static extern void VmdErfc(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsErfcInv")]
            internal static extern void VsErfcInv(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdErfcInv")]
            internal static extern void VdErfcInv(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsErfcInv")]
            internal static extern void VmsErfcInv(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdErfcInv")]
            internal static extern void VmdErfcInv(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsCdfNorm")]
            internal static extern void VsCdfNorm(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdCdfNorm")]
            internal static extern void VdCdfNorm(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsCdfNorm")]
            internal static extern void VmsCdfNorm(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdCdfNorm")]
            internal static extern void VmdCdfNorm(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsCdfNormInv")]
            internal static extern void VsCdfNormInv(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdCdfNormInv")]
            internal static extern void VdCdfNormInv(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsCdfNormInv")]
            internal static extern void VmsCdfNormInv(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdCdfNormInv")]
            internal static extern void VmdCdfNormInv(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsLGamma")]
            internal static extern void VsLGamma(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdLGamma")]
            internal static extern void VdLGamma(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsLGamma")]
            internal static extern void VmsLGamma(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdLGamma")]
            internal static extern void VmdLGamma(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsTGamma")]
            internal static extern void VsTGamma(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdTGamma")]
            internal static extern void VdTGamma(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsTGamma")]
            internal static extern void VmsTGamma(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdTGamma")]
            internal static extern void VmdTGamma(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAtan2")]
            internal static extern void VsAtan2(int n, float[] a, float[] b, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAtan2")]
            internal static extern void VdAtan2(int n, double[] a, double[] b, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAtan2")]
            internal static extern void VmsAtan2(int n, float[] a, float[] b, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAtan2")]
            internal static extern void VmdAtan2(int n, double[] a, double[] b, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAtan2pi")]
            internal static extern void VsAtan2pi(int n, float[] a, float[] b, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAtan2pi")]
            internal static extern void VdAtan2pi(int n, double[] a, double[] b, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAtan2pi")]
            internal static extern void VmsAtan2pi(int n, float[] a, float[] b, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAtan2pi")]
            internal static extern void VmdAtan2pi(int n, double[] a, double[] b, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsMul")]
            internal static extern void VsMul(int n, float[] a, float[] b, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdMul")]
            internal static extern void VdMul(int n, double[] a, double[] b, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsMul")]
            internal static extern void VmsMul(int n, float[] a, float[] b, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdMul")]
            internal static extern void VmdMul(int n, double[] a, double[] b, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcMul")]
            internal static extern void VcMul(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] b, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzMul")]
            internal static extern void VzMul(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] b, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcMul")]
            internal static extern void VmcMul(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] b, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzMul")]
            internal static extern void VmzMul(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] b, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsDiv")]
            internal static extern void VsDiv(int n, float[] a, float[] b, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdDiv")]
            internal static extern void VdDiv(int n, double[] a, double[] b, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsDiv")]
            internal static extern void VmsDiv(int n, float[] a, float[] b, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdDiv")]
            internal static extern void VmdDiv(int n, double[] a, double[] b, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcDiv")]
            internal static extern void VcDiv(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] b, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzDiv")]
            internal static extern void VzDiv(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] b, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcDiv")]
            internal static extern void VmcDiv(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] b, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzDiv")]
            internal static extern void VmzDiv(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] b, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsPow")]
            internal static extern void VsPow(int n, float[] a, float[] b, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdPow")]
            internal static extern void VdPow(int n, double[] a, double[] b, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsPow")]
            internal static extern void VmsPow(int n, float[] a, float[] b, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdPow")]
            internal static extern void VmdPow(int n, double[] a, double[] b, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcPow")]
            internal static extern void VcPow(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] b, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzPow")]
            internal static extern void VzPow(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] b, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcPow")]
            internal static extern void VmcPow(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] b, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzPow")]
            internal static extern void VmzPow(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] b, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsPow3o2")]
            internal static extern void VsPow3o2(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdPow3o2")]
            internal static extern void VdPow3o2(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsPow3o2")]
            internal static extern void VmsPow3o2(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdPow3o2")]
            internal static extern void VmdPow3o2(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsPow2o3")]
            internal static extern void VsPow2o3(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdPow2o3")]
            internal static extern void VdPow2o3(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsPow2o3")]
            internal static extern void VmsPow2o3(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdPow2o3")]
            internal static extern void VmdPow2o3(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsPowx")]
            internal static extern void VsPowx(int n, float[] a, float b, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdPowx")]
            internal static extern void VdPowx(int n, double[] a, double b, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsPowx")]
            internal static extern void VmsPowx(int n, float[] a, float b, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdPowx")]
            internal static extern void VmdPowx(int n, double[] a, double b, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsPowr")]
            internal static extern void VsPowr(int n, float[] a, float[] b, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdPowr")]
            internal static extern void VdPowr(int n, double[] a, double[] b, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsPowr")]
            internal static extern void VmsPowr(int n, float[] a, float[] b, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdPowr")]
            internal static extern void VmdPowr(int n, double[] a, double[] b, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsSinCos")]
            internal static extern void VsSinCos(int n, float[] a, float[] r1, float[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdSinCos")]
            internal static extern void VdSinCos(int n, double[] a, double[] r1, double[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsSinCos")]
            internal static extern void VmsSinCos(int n, float[] a, float[] r1, float[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdSinCos")]
            internal static extern void VmdSinCos(int n, double[] a, double[] r1, double[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsLinearFrac")]
            internal static extern void VsLinearFrac(int n, float[] a, float[] b, float scalea, float shifta, float scaleb, float shiftb, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdLinearFrac")]
            internal static extern void VdLinearFrac(int n, double[] a, double[] b, double scalea, double shifta, double scaleb, double shiftb, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsLinearFrac")]
            internal static extern void VmsLinearFrac(int n, float[] a, float[] b, float scalea, float shifta, float scaleb, float shiftb, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdLinearFrac")]
            internal static extern void VmdLinearFrac(int n, double[] a, double[] b, double scalea, double shifta, double scaleb, double shiftb, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsCeil")]
            internal static extern void VsCeil(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdCeil")]
            internal static extern void VdCeil(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsCeil")]
            internal static extern void VmsCeil(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdCeil")]
            internal static extern void VmdCeil(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsFloor")]
            internal static extern void VsFloor(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdFloor")]
            internal static extern void VdFloor(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsFloor")]
            internal static extern void VmsFloor(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdFloor")]
            internal static extern void VmdFloor(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsFrac")]
            internal static extern void VsFrac(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdFrac")]
            internal static extern void VdFrac(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsFrac")]
            internal static extern void VmsFrac(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdFrac")]
            internal static extern void VmdFrac(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsModf")]
            internal static extern void VsModf(int n, float[] a, float[] r1, float[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdModf")]
            internal static extern void VdModf(int n, double[] a, double[] r1, double[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsModf")]
            internal static extern void VmsModf(int n, float[] a, float[] r1, float[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdModf")]
            internal static extern void VmdModf(int n, double[] a, double[] r1, double[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsFmod")]
            internal static extern void VsFmod(int n, float[] a, float[] r1, float[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdFmod")]
            internal static extern void VdFmod(int n, double[] a, double[] r1, double[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsFmod")]
            internal static extern void VmsFmod(int n, float[] a, float[] r1, float[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdFmod")]
            internal static extern void VmdFmod(int n, double[] a, double[] r1, double[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsRemainder")]
            internal static extern void VsRemainder(int n, float[] a, float[] r1, float[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdRemainder")]
            internal static extern void VdRemainder(int n, double[] a, double[] r1, double[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsRemainder")]
            internal static extern void VmsRemainder(int n, float[] a, float[] r1, float[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdRemainder")]
            internal static extern void VmdRemainder(int n, double[] a, double[] r1, double[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsNextAfter")]
            internal static extern void VsNextAfter(int n, float[] a, float[] r1, float[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdNextAfter")]
            internal static extern void VdNextAfter(int n, double[] a, double[] r1, double[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsNextAfter")]
            internal static extern void VmsNextAfter(int n, float[] a, float[] r1, float[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdNextAfter")]
            internal static extern void VmdNextAfter(int n, double[] a, double[] r1, double[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsCopySign")]
            internal static extern void VsCopySign(int n, float[] a, float[] r1, float[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdCopySign")]
            internal static extern void VdCopySign(int n, double[] a, double[] r1, double[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsCopySign")]
            internal static extern void VmsCopySign(int n, float[] a, float[] r1, float[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdCopySign")]
            internal static extern void VmdCopySign(int n, double[] a, double[] r1, double[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsFdim")]
            internal static extern void VsFdim(int n, float[] a, float[] r1, float[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdFdim")]
            internal static extern void VdFdim(int n, double[] a, double[] r1, double[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsFdim")]
            internal static extern void VmsFdim(int n, float[] a, float[] r1, float[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdFdim")]
            internal static extern void VmdFdim(int n, double[] a, double[] r1, double[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsFmax")]
            internal static extern void VsFmax(int n, float[] a, float[] r1, float[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdFmax")]
            internal static extern void VdFmax(int n, double[] a, double[] r1, double[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsFmax")]
            internal static extern void VmsFmax(int n, float[] a, float[] r1, float[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdFmax")]
            internal static extern void VmdFmax(int n, double[] a, double[] r1, double[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsFmin")]
            internal static extern void VsFmin(int n, float[] a, float[] r1, float[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdFmin")]
            internal static extern void VdFmin(int n, double[] a, double[] r1, double[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsFmin")]
            internal static extern void VmsFmin(int n, float[] a, float[] r1, float[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdFmin")]
            internal static extern void VmdFmin(int n, double[] a, double[] r1, double[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsMaxMag")]
            internal static extern void VsMaxMag(int n, float[] a, float[] r1, float[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdMaxMag")]
            internal static extern void VdMaxMag(int n, double[] a, double[] r1, double[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsMaxMag")]
            internal static extern void VmsMaxMag(int n, float[] a, float[] r1, float[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdMaxMag")]
            internal static extern void VmdMaxMag(int n, double[] a, double[] r1, double[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsMinMag")]
            internal static extern void VsMinMag(int n, float[] a, float[] r1, float[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdMinMag")]
            internal static extern void VdMinMag(int n, double[] a, double[] r1, double[] r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsMinMag")]
            internal static extern void VmsMinMag(int n, float[] a, float[] r1, float[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdMinMag")]
            internal static extern void VmdMinMag(int n, double[] a, double[] r1, double[] r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsNearbyInt")]
            internal static extern void VsNearbyInt(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdNearbyInt")]
            internal static extern void VdNearbyInt(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsNearbyInt")]
            internal static extern void VmsNearbyInt(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdNearbyInt")]
            internal static extern void VmdNearbyInt(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsRint")]
            internal static extern void VsRint(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdRint")]
            internal static extern void VdRint(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsRint")]
            internal static extern void VmsRint(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdRint")]
            internal static extern void VmdRint(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsRound")]
            internal static extern void VsRound(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdRound")]
            internal static extern void VdRound(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsRound")]
            internal static extern void VmsRound(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdRound")]
            internal static extern void VmdRound(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsTrunc")]
            internal static extern void VsTrunc(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdTrunc")]
            internal static extern void VdTrunc(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsTrunc")]
            internal static extern void VmsTrunc(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdTrunc")]
            internal static extern void VmdTrunc(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcConj")]
            internal static extern void VcConj(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzConj")]
            internal static extern void VzConj(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcConj")]
            internal static extern void VmcConj(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzConj")]
            internal static extern void VmzConj(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcMulByConj")]
            internal static extern void VcMulByConj(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] b, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzMulByConj")]
            internal static extern void VzMulByConj(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] b, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcMulByConj")]
            internal static extern void VmcMulByConj(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] b, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzMulByConj")]
            internal static extern void VmzMulByConj(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] b, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcCIS")]
            internal static extern void VcCIS(int n, float[] a, global::IntelMKL.MKL_Complex8.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzCIS")]
            internal static extern void VzCIS(int n, double[] a, global::IntelMKL.MKL_Complex16.__Internal[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmcCIS")]
            internal static extern void VmcCIS(int n, float[] a, global::IntelMKL.MKL_Complex8.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmzCIS")]
            internal static extern void VmzCIS(int n, double[] a, global::IntelMKL.MKL_Complex16.__Internal[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsExpInt1")]
            internal static extern void VsExpInt1(int n, float[] a, float[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdExpInt1")]
            internal static extern void VdExpInt1(int n, double[] a, double[] r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsExpInt1")]
            internal static extern void VmsExpInt1(int n, float[] a, float[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdExpInt1")]
            internal static extern void VmdExpInt1(int n, double[] a, double[] r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsPackI")]
            internal static extern void VsPackI(int n, float[] a, int incra, float[] y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdPackI")]
            internal static extern void VdPackI(int n, double[] a, int incra, double[] y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcPackI")]
            internal static extern void VcPackI(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, int incra, global::IntelMKL.MKL_Complex8.__Internal[] y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzPackI")]
            internal static extern void VzPackI(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, int incra, global::IntelMKL.MKL_Complex16.__Internal[] y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsPackV")]
            internal static extern void VsPackV(int n, float[] a, int[] ia, float[] y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdPackV")]
            internal static extern void VdPackV(int n, double[] a, int[] ia, double[] y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcPackV")]
            internal static extern void VcPackV(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, int[] ia, global::IntelMKL.MKL_Complex8.__Internal[] y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzPackV")]
            internal static extern void VzPackV(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, int[] ia, global::IntelMKL.MKL_Complex16.__Internal[] y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsPackM")]
            internal static extern void VsPackM(int n, float[] a, int[] ma, float[] y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdPackM")]
            internal static extern void VdPackM(int n, double[] a, int[] ma, double[] y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcPackM")]
            internal static extern void VcPackM(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, int[] ma, global::IntelMKL.MKL_Complex8.__Internal[] y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzPackM")]
            internal static extern void VzPackM(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, int[] ma, global::IntelMKL.MKL_Complex16.__Internal[] y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsUnpackI")]
            internal static extern void VsUnpackI(int n, float[] a, float[] y, int incry);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdUnpackI")]
            internal static extern void VdUnpackI(int n, double[] a, double[] y, int incry);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcUnpackI")]
            internal static extern void VcUnpackI(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] y, int incry);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzUnpackI")]
            internal static extern void VzUnpackI(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] y, int incry);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsUnpackV")]
            internal static extern void VsUnpackV(int n, float[] a, float[] y, int[] iy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdUnpackV")]
            internal static extern void VdUnpackV(int n, double[] a, double[] y, int[] iy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcUnpackV")]
            internal static extern void VcUnpackV(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] y, int[] iy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzUnpackV")]
            internal static extern void VzUnpackV(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] y, int[] iy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsUnpackM")]
            internal static extern void VsUnpackM(int n, float[] a, float[] y, int[] my);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdUnpackM")]
            internal static extern void VdUnpackM(int n, double[] a, double[] y, int[] my);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vcUnpackM")]
            internal static extern void VcUnpackM(int n, global::IntelMKL.MKL_Complex8.__Internal[] a, global::IntelMKL.MKL_Complex8.__Internal[] y, int[] my);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vzUnpackM")]
            internal static extern void VzUnpackM(int n, global::IntelMKL.MKL_Complex16.__Internal[] a, global::IntelMKL.MKL_Complex16.__Internal[] y, int[] my);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmlSetErrStatus")]
            internal static extern int VmlSetErrStatus(int status);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmlGetErrStatus")]
            internal static extern int VmlGetErrStatus();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmlClearErrStatus")]
            internal static extern int VmlClearErrStatus();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmlSetErrorCallBack")]
            internal static extern global::System.IntPtr VmlSetErrorCallBack(global::System.IntPtr func);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmlGetErrorCallBack")]
            internal static extern global::System.IntPtr VmlGetErrorCallBack();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmlClearErrorCallBack")]
            internal static extern global::System.IntPtr VmlClearErrorCallBack();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmlSetMode")]
            internal static extern uint VmlSetMode(uint newmode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmlGetMode")]
            internal static extern uint VmlGetMode();
        }

        public static void VsAbs(int n, float[] a, float[] r)
        {
            __Internal.VsAbs(n, a, r);
        }

        public static void VdAbs(int n, double[] a, double[] r)
        {
            __Internal.VdAbs(n, a, r);
        }

        public static void VmsAbs(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsAbs(n, a, r, mode);
        }

        public static void VmdAbs(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdAbs(n, a, r, mode);
        }

        public static void VcAbs(int n, global::IntelMKL.MKL_Complex8[] a, float[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            __Internal.VcAbs(n, __arg1, r);
        }

        public static void VzAbs(int n, global::IntelMKL.MKL_Complex16[] a, double[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            __Internal.VzAbs(n, __arg1, r);
        }

        public static void VmcAbs(int n, global::IntelMKL.MKL_Complex8[] a, float[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            __Internal.VmcAbs(n, __arg1, r, mode);
        }

        public static void VmzAbs(int n, global::IntelMKL.MKL_Complex16[] a, double[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            __Internal.VmzAbs(n, __arg1, r, mode);
        }

        public static void VcArg(int n, global::IntelMKL.MKL_Complex8[] a, float[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            __Internal.VcArg(n, __arg1, r);
        }

        public static void VzArg(int n, global::IntelMKL.MKL_Complex16[] a, double[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            __Internal.VzArg(n, __arg1, r);
        }

        public static void VmcArg(int n, global::IntelMKL.MKL_Complex8[] a, float[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            __Internal.VmcArg(n, __arg1, r, mode);
        }

        public static void VmzArg(int n, global::IntelMKL.MKL_Complex16[] a, double[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            __Internal.VmzArg(n, __arg1, r, mode);
        }

        public static void VsAdd(int n, float[] a, float[] b, float[] r)
        {
            __Internal.VsAdd(n, a, b, r);
        }

        public static void VdAdd(int n, double[] a, double[] b, double[] r)
        {
            __Internal.VdAdd(n, a, b, r);
        }

        public static void VmsAdd(int n, float[] a, float[] b, float[] r, long mode)
        {
            __Internal.VmsAdd(n, a, b, r, mode);
        }

        public static void VmdAdd(int n, double[] a, double[] b, double[] r, long mode)
        {
            __Internal.VmdAdd(n, a, b, r, mode);
        }

        public static void VcAdd(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] b, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex8.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VcAdd(n, __arg1, __arg2, __arg3);
        }

        public static void VzAdd(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] b, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex16.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VzAdd(n, __arg1, __arg2, __arg3);
        }

        public static void VmcAdd(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] b, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex8.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VmcAdd(n, __arg1, __arg2, __arg3, mode);
        }

        public static void VmzAdd(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] b, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex16.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VmzAdd(n, __arg1, __arg2, __arg3, mode);
        }

        public static void VsSub(int n, float[] a, float[] b, float[] r)
        {
            __Internal.VsSub(n, a, b, r);
        }

        public static void VdSub(int n, double[] a, double[] b, double[] r)
        {
            __Internal.VdSub(n, a, b, r);
        }

        public static void VmsSub(int n, float[] a, float[] b, float[] r, long mode)
        {
            __Internal.VmsSub(n, a, b, r, mode);
        }

        public static void VmdSub(int n, double[] a, double[] b, double[] r, long mode)
        {
            __Internal.VmdSub(n, a, b, r, mode);
        }

        public static void VcSub(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] b, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex8.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VcSub(n, __arg1, __arg2, __arg3);
        }

        public static void VzSub(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] b, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex16.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VzSub(n, __arg1, __arg2, __arg3);
        }

        public static void VmcSub(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] b, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex8.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VmcSub(n, __arg1, __arg2, __arg3, mode);
        }

        public static void VmzSub(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] b, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex16.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VmzSub(n, __arg1, __arg2, __arg3, mode);
        }

        public static void VsInv(int n, float[] a, float[] r)
        {
            __Internal.VsInv(n, a, r);
        }

        public static void VdInv(int n, double[] a, double[] r)
        {
            __Internal.VdInv(n, a, r);
        }

        public static void VmsInv(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsInv(n, a, r, mode);
        }

        public static void VmdInv(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdInv(n, a, r, mode);
        }

        public static void VsSqrt(int n, float[] a, float[] r)
        {
            __Internal.VsSqrt(n, a, r);
        }

        public static void VdSqrt(int n, double[] a, double[] r)
        {
            __Internal.VdSqrt(n, a, r);
        }

        public static void VmsSqrt(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsSqrt(n, a, r, mode);
        }

        public static void VmdSqrt(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdSqrt(n, a, r, mode);
        }

        public static void VcSqrt(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VcSqrt(n, __arg1, __arg2);
        }

        public static void VzSqrt(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VzSqrt(n, __arg1, __arg2);
        }

        public static void VmcSqrt(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmcSqrt(n, __arg1, __arg2, mode);
        }

        public static void VmzSqrt(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmzSqrt(n, __arg1, __arg2, mode);
        }

        public static void VsInvSqrt(int n, float[] a, float[] r)
        {
            __Internal.VsInvSqrt(n, a, r);
        }

        public static void VdInvSqrt(int n, double[] a, double[] r)
        {
            __Internal.VdInvSqrt(n, a, r);
        }

        public static void VmsInvSqrt(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsInvSqrt(n, a, r, mode);
        }

        public static void VmdInvSqrt(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdInvSqrt(n, a, r, mode);
        }

        public static void VsCbrt(int n, float[] a, float[] r)
        {
            __Internal.VsCbrt(n, a, r);
        }

        public static void VdCbrt(int n, double[] a, double[] r)
        {
            __Internal.VdCbrt(n, a, r);
        }

        public static void VmsCbrt(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsCbrt(n, a, r, mode);
        }

        public static void VmdCbrt(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdCbrt(n, a, r, mode);
        }

        public static void VsInvCbrt(int n, float[] a, float[] r)
        {
            __Internal.VsInvCbrt(n, a, r);
        }

        public static void VdInvCbrt(int n, double[] a, double[] r)
        {
            __Internal.VdInvCbrt(n, a, r);
        }

        public static void VmsInvCbrt(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsInvCbrt(n, a, r, mode);
        }

        public static void VmdInvCbrt(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdInvCbrt(n, a, r, mode);
        }

        public static void VsSqr(int n, float[] a, float[] r)
        {
            __Internal.VsSqr(n, a, r);
        }

        public static void VdSqr(int n, double[] a, double[] r)
        {
            __Internal.VdSqr(n, a, r);
        }

        public static void VmsSqr(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsSqr(n, a, r, mode);
        }

        public static void VmdSqr(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdSqr(n, a, r, mode);
        }

        public static void VsExp(int n, float[] a, float[] r)
        {
            __Internal.VsExp(n, a, r);
        }

        public static void VdExp(int n, double[] a, double[] r)
        {
            __Internal.VdExp(n, a, r);
        }

        public static void VmsExp(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsExp(n, a, r, mode);
        }

        public static void VmdExp(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdExp(n, a, r, mode);
        }

        public static void VcExp(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VcExp(n, __arg1, __arg2);
        }

        public static void VzExp(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VzExp(n, __arg1, __arg2);
        }

        public static void VmcExp(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmcExp(n, __arg1, __arg2, mode);
        }

        public static void VmzExp(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmzExp(n, __arg1, __arg2, mode);
        }

        public static void VsExp2(int n, float[] a, float[] r)
        {
            __Internal.VsExp2(n, a, r);
        }

        public static void VdExp2(int n, double[] a, double[] r)
        {
            __Internal.VdExp2(n, a, r);
        }

        public static void VmsExp2(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsExp2(n, a, r, mode);
        }

        public static void VmdExp2(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdExp2(n, a, r, mode);
        }

        public static void VsExp10(int n, float[] a, float[] r)
        {
            __Internal.VsExp10(n, a, r);
        }

        public static void VdExp10(int n, double[] a, double[] r)
        {
            __Internal.VdExp10(n, a, r);
        }

        public static void VmsExp10(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsExp10(n, a, r, mode);
        }

        public static void VmdExp10(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdExp10(n, a, r, mode);
        }

        public static void VsExpm1(int n, float[] a, float[] r)
        {
            __Internal.VsExpm1(n, a, r);
        }

        public static void VdExpm1(int n, double[] a, double[] r)
        {
            __Internal.VdExpm1(n, a, r);
        }

        public static void VmsExpm1(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsExpm1(n, a, r, mode);
        }

        public static void VmdExpm1(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdExpm1(n, a, r, mode);
        }

        public static void VsLn(int n, float[] a, float[] r)
        {
            __Internal.VsLn(n, a, r);
        }

        public static void VdLn(int n, double[] a, double[] r)
        {
            __Internal.VdLn(n, a, r);
        }

        public static void VmsLn(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsLn(n, a, r, mode);
        }

        public static void VmdLn(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdLn(n, a, r, mode);
        }

        public static void VcLn(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VcLn(n, __arg1, __arg2);
        }

        public static void VzLn(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VzLn(n, __arg1, __arg2);
        }

        public static void VmcLn(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmcLn(n, __arg1, __arg2, mode);
        }

        public static void VmzLn(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmzLn(n, __arg1, __arg2, mode);
        }

        public static void VsLog2(int n, float[] a, float[] r)
        {
            __Internal.VsLog2(n, a, r);
        }

        public static void VdLog2(int n, double[] a, double[] r)
        {
            __Internal.VdLog2(n, a, r);
        }

        public static void VmsLog2(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsLog2(n, a, r, mode);
        }

        public static void VmdLog2(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdLog2(n, a, r, mode);
        }

        public static void VsLog10(int n, float[] a, float[] r)
        {
            __Internal.VsLog10(n, a, r);
        }

        public static void VdLog10(int n, double[] a, double[] r)
        {
            __Internal.VdLog10(n, a, r);
        }

        public static void VmsLog10(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsLog10(n, a, r, mode);
        }

        public static void VmdLog10(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdLog10(n, a, r, mode);
        }

        public static void VcLog10(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VcLog10(n, __arg1, __arg2);
        }

        public static void VzLog10(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VzLog10(n, __arg1, __arg2);
        }

        public static void VmcLog10(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmcLog10(n, __arg1, __arg2, mode);
        }

        public static void VmzLog10(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmzLog10(n, __arg1, __arg2, mode);
        }

        public static void VsLog1p(int n, float[] a, float[] r)
        {
            __Internal.VsLog1p(n, a, r);
        }

        public static void VdLog1p(int n, double[] a, double[] r)
        {
            __Internal.VdLog1p(n, a, r);
        }

        public static void VmsLog1p(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsLog1p(n, a, r, mode);
        }

        public static void VmdLog1p(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdLog1p(n, a, r, mode);
        }

        public static void VsLogb(int n, float[] a, float[] r)
        {
            __Internal.VsLogb(n, a, r);
        }

        public static void VdLogb(int n, double[] a, double[] r)
        {
            __Internal.VdLogb(n, a, r);
        }

        public static void VmsLogb(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsLogb(n, a, r, mode);
        }

        public static void VmdLogb(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdLogb(n, a, r, mode);
        }

        public static void VsCos(int n, float[] a, float[] r)
        {
            __Internal.VsCos(n, a, r);
        }

        public static void VdCos(int n, double[] a, double[] r)
        {
            __Internal.VdCos(n, a, r);
        }

        public static void VmsCos(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsCos(n, a, r, mode);
        }

        public static void VmdCos(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdCos(n, a, r, mode);
        }

        public static void VcCos(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VcCos(n, __arg1, __arg2);
        }

        public static void VzCos(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VzCos(n, __arg1, __arg2);
        }

        public static void VmcCos(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmcCos(n, __arg1, __arg2, mode);
        }

        public static void VmzCos(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmzCos(n, __arg1, __arg2, mode);
        }

        public static void VsSin(int n, float[] a, float[] r)
        {
            __Internal.VsSin(n, a, r);
        }

        public static void VdSin(int n, double[] a, double[] r)
        {
            __Internal.VdSin(n, a, r);
        }

        public static void VmsSin(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsSin(n, a, r, mode);
        }

        public static void VmdSin(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdSin(n, a, r, mode);
        }

        public static void VcSin(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VcSin(n, __arg1, __arg2);
        }

        public static void VzSin(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VzSin(n, __arg1, __arg2);
        }

        public static void VmcSin(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmcSin(n, __arg1, __arg2, mode);
        }

        public static void VmzSin(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmzSin(n, __arg1, __arg2, mode);
        }

        public static void VsTan(int n, float[] a, float[] r)
        {
            __Internal.VsTan(n, a, r);
        }

        public static void VdTan(int n, double[] a, double[] r)
        {
            __Internal.VdTan(n, a, r);
        }

        public static void VmsTan(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsTan(n, a, r, mode);
        }

        public static void VmdTan(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdTan(n, a, r, mode);
        }

        public static void VcTan(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VcTan(n, __arg1, __arg2);
        }

        public static void VzTan(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VzTan(n, __arg1, __arg2);
        }

        public static void VmcTan(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmcTan(n, __arg1, __arg2, mode);
        }

        public static void VmzTan(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmzTan(n, __arg1, __arg2, mode);
        }

        public static void VsCospi(int n, float[] a, float[] r)
        {
            __Internal.VsCospi(n, a, r);
        }

        public static void VdCospi(int n, double[] a, double[] r)
        {
            __Internal.VdCospi(n, a, r);
        }

        public static void VmsCospi(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsCospi(n, a, r, mode);
        }

        public static void VmdCospi(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdCospi(n, a, r, mode);
        }

        public static void VsSinpi(int n, float[] a, float[] r)
        {
            __Internal.VsSinpi(n, a, r);
        }

        public static void VdSinpi(int n, double[] a, double[] r)
        {
            __Internal.VdSinpi(n, a, r);
        }

        public static void VmsSinpi(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsSinpi(n, a, r, mode);
        }

        public static void VmdSinpi(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdSinpi(n, a, r, mode);
        }

        public static void VsTanpi(int n, float[] a, float[] r)
        {
            __Internal.VsTanpi(n, a, r);
        }

        public static void VdTanpi(int n, double[] a, double[] r)
        {
            __Internal.VdTanpi(n, a, r);
        }

        public static void VmsTanpi(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsTanpi(n, a, r, mode);
        }

        public static void VmdTanpi(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdTanpi(n, a, r, mode);
        }

        public static void VsCosd(int n, float[] a, float[] r)
        {
            __Internal.VsCosd(n, a, r);
        }

        public static void VdCosd(int n, double[] a, double[] r)
        {
            __Internal.VdCosd(n, a, r);
        }

        public static void VmsCosd(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsCosd(n, a, r, mode);
        }

        public static void VmdCosd(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdCosd(n, a, r, mode);
        }

        public static void VsSind(int n, float[] a, float[] r)
        {
            __Internal.VsSind(n, a, r);
        }

        public static void VdSind(int n, double[] a, double[] r)
        {
            __Internal.VdSind(n, a, r);
        }

        public static void VmsSind(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsSind(n, a, r, mode);
        }

        public static void VmdSind(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdSind(n, a, r, mode);
        }

        public static void VsTand(int n, float[] a, float[] r)
        {
            __Internal.VsTand(n, a, r);
        }

        public static void VdTand(int n, double[] a, double[] r)
        {
            __Internal.VdTand(n, a, r);
        }

        public static void VmsTand(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsTand(n, a, r, mode);
        }

        public static void VmdTand(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdTand(n, a, r, mode);
        }

        public static void VsCosh(int n, float[] a, float[] r)
        {
            __Internal.VsCosh(n, a, r);
        }

        public static void VdCosh(int n, double[] a, double[] r)
        {
            __Internal.VdCosh(n, a, r);
        }

        public static void VmsCosh(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsCosh(n, a, r, mode);
        }

        public static void VmdCosh(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdCosh(n, a, r, mode);
        }

        public static void VcCosh(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VcCosh(n, __arg1, __arg2);
        }

        public static void VzCosh(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VzCosh(n, __arg1, __arg2);
        }

        public static void VmcCosh(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmcCosh(n, __arg1, __arg2, mode);
        }

        public static void VmzCosh(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmzCosh(n, __arg1, __arg2, mode);
        }

        public static void VsSinh(int n, float[] a, float[] r)
        {
            __Internal.VsSinh(n, a, r);
        }

        public static void VdSinh(int n, double[] a, double[] r)
        {
            __Internal.VdSinh(n, a, r);
        }

        public static void VmsSinh(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsSinh(n, a, r, mode);
        }

        public static void VmdSinh(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdSinh(n, a, r, mode);
        }

        public static void VcSinh(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VcSinh(n, __arg1, __arg2);
        }

        public static void VzSinh(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VzSinh(n, __arg1, __arg2);
        }

        public static void VmcSinh(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmcSinh(n, __arg1, __arg2, mode);
        }

        public static void VmzSinh(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmzSinh(n, __arg1, __arg2, mode);
        }

        public static void VsTanh(int n, float[] a, float[] r)
        {
            __Internal.VsTanh(n, a, r);
        }

        public static void VdTanh(int n, double[] a, double[] r)
        {
            __Internal.VdTanh(n, a, r);
        }

        public static void VmsTanh(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsTanh(n, a, r, mode);
        }

        public static void VmdTanh(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdTanh(n, a, r, mode);
        }

        public static void VcTanh(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VcTanh(n, __arg1, __arg2);
        }

        public static void VzTanh(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VzTanh(n, __arg1, __arg2);
        }

        public static void VmcTanh(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmcTanh(n, __arg1, __arg2, mode);
        }

        public static void VmzTanh(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmzTanh(n, __arg1, __arg2, mode);
        }

        public static void VsAcos(int n, float[] a, float[] r)
        {
            __Internal.VsAcos(n, a, r);
        }

        public static void VdAcos(int n, double[] a, double[] r)
        {
            __Internal.VdAcos(n, a, r);
        }

        public static void VmsAcos(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsAcos(n, a, r, mode);
        }

        public static void VmdAcos(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdAcos(n, a, r, mode);
        }

        public static void VcAcos(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VcAcos(n, __arg1, __arg2);
        }

        public static void VzAcos(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VzAcos(n, __arg1, __arg2);
        }

        public static void VmcAcos(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmcAcos(n, __arg1, __arg2, mode);
        }

        public static void VmzAcos(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmzAcos(n, __arg1, __arg2, mode);
        }

        public static void VsAsin(int n, float[] a, float[] r)
        {
            __Internal.VsAsin(n, a, r);
        }

        public static void VdAsin(int n, double[] a, double[] r)
        {
            __Internal.VdAsin(n, a, r);
        }

        public static void VmsAsin(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsAsin(n, a, r, mode);
        }

        public static void VmdAsin(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdAsin(n, a, r, mode);
        }

        public static void VcAsin(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VcAsin(n, __arg1, __arg2);
        }

        public static void VzAsin(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VzAsin(n, __arg1, __arg2);
        }

        public static void VmcAsin(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmcAsin(n, __arg1, __arg2, mode);
        }

        public static void VmzAsin(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmzAsin(n, __arg1, __arg2, mode);
        }

        public static void VsAtan(int n, float[] a, float[] r)
        {
            __Internal.VsAtan(n, a, r);
        }

        public static void VdAtan(int n, double[] a, double[] r)
        {
            __Internal.VdAtan(n, a, r);
        }

        public static void VmsAtan(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsAtan(n, a, r, mode);
        }

        public static void VmdAtan(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdAtan(n, a, r, mode);
        }

        public static void VcAtan(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VcAtan(n, __arg1, __arg2);
        }

        public static void VzAtan(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VzAtan(n, __arg1, __arg2);
        }

        public static void VmcAtan(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmcAtan(n, __arg1, __arg2, mode);
        }

        public static void VmzAtan(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmzAtan(n, __arg1, __arg2, mode);
        }

        public static void VsAcospi(int n, float[] a, float[] r)
        {
            __Internal.VsAcospi(n, a, r);
        }

        public static void VdAcospi(int n, double[] a, double[] r)
        {
            __Internal.VdAcospi(n, a, r);
        }

        public static void VmsAcospi(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsAcospi(n, a, r, mode);
        }

        public static void VmdAcospi(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdAcospi(n, a, r, mode);
        }

        public static void VsAsinpi(int n, float[] a, float[] r)
        {
            __Internal.VsAsinpi(n, a, r);
        }

        public static void VdAsinpi(int n, double[] a, double[] r)
        {
            __Internal.VdAsinpi(n, a, r);
        }

        public static void VmsAsinpi(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsAsinpi(n, a, r, mode);
        }

        public static void VmdAsinpi(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdAsinpi(n, a, r, mode);
        }

        public static void VsAtanpi(int n, float[] a, float[] r)
        {
            __Internal.VsAtanpi(n, a, r);
        }

        public static void VdAtanpi(int n, double[] a, double[] r)
        {
            __Internal.VdAtanpi(n, a, r);
        }

        public static void VmsAtanpi(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsAtanpi(n, a, r, mode);
        }

        public static void VmdAtanpi(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdAtanpi(n, a, r, mode);
        }

        public static void VsAcosh(int n, float[] a, float[] r)
        {
            __Internal.VsAcosh(n, a, r);
        }

        public static void VdAcosh(int n, double[] a, double[] r)
        {
            __Internal.VdAcosh(n, a, r);
        }

        public static void VmsAcosh(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsAcosh(n, a, r, mode);
        }

        public static void VmdAcosh(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdAcosh(n, a, r, mode);
        }

        public static void VcAcosh(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VcAcosh(n, __arg1, __arg2);
        }

        public static void VzAcosh(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VzAcosh(n, __arg1, __arg2);
        }

        public static void VmcAcosh(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmcAcosh(n, __arg1, __arg2, mode);
        }

        public static void VmzAcosh(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmzAcosh(n, __arg1, __arg2, mode);
        }

        public static void VsAsinh(int n, float[] a, float[] r)
        {
            __Internal.VsAsinh(n, a, r);
        }

        public static void VdAsinh(int n, double[] a, double[] r)
        {
            __Internal.VdAsinh(n, a, r);
        }

        public static void VmsAsinh(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsAsinh(n, a, r, mode);
        }

        public static void VmdAsinh(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdAsinh(n, a, r, mode);
        }

        public static void VcAsinh(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VcAsinh(n, __arg1, __arg2);
        }

        public static void VzAsinh(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VzAsinh(n, __arg1, __arg2);
        }

        public static void VmcAsinh(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmcAsinh(n, __arg1, __arg2, mode);
        }

        public static void VmzAsinh(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmzAsinh(n, __arg1, __arg2, mode);
        }

        public static void VsAtanh(int n, float[] a, float[] r)
        {
            __Internal.VsAtanh(n, a, r);
        }

        public static void VdAtanh(int n, double[] a, double[] r)
        {
            __Internal.VdAtanh(n, a, r);
        }

        public static void VmsAtanh(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsAtanh(n, a, r, mode);
        }

        public static void VmdAtanh(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdAtanh(n, a, r, mode);
        }

        public static void VcAtanh(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VcAtanh(n, __arg1, __arg2);
        }

        public static void VzAtanh(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VzAtanh(n, __arg1, __arg2);
        }

        public static void VmcAtanh(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmcAtanh(n, __arg1, __arg2, mode);
        }

        public static void VmzAtanh(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmzAtanh(n, __arg1, __arg2, mode);
        }

        public static void VsErf(int n, float[] a, float[] r)
        {
            __Internal.VsErf(n, a, r);
        }

        public static void VdErf(int n, double[] a, double[] r)
        {
            __Internal.VdErf(n, a, r);
        }

        public static void VmsErf(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsErf(n, a, r, mode);
        }

        public static void VmdErf(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdErf(n, a, r, mode);
        }

        public static void VsErfInv(int n, float[] a, float[] r)
        {
            __Internal.VsErfInv(n, a, r);
        }

        public static void VdErfInv(int n, double[] a, double[] r)
        {
            __Internal.VdErfInv(n, a, r);
        }

        public static void VmsErfInv(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsErfInv(n, a, r, mode);
        }

        public static void VmdErfInv(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdErfInv(n, a, r, mode);
        }

        public static void VsHypot(int n, float[] a, float[] b, float[] r)
        {
            __Internal.VsHypot(n, a, b, r);
        }

        public static void VdHypot(int n, double[] a, double[] b, double[] r)
        {
            __Internal.VdHypot(n, a, b, r);
        }

        public static void VmsHypot(int n, float[] a, float[] b, float[] r, long mode)
        {
            __Internal.VmsHypot(n, a, b, r, mode);
        }

        public static void VmdHypot(int n, double[] a, double[] b, double[] r, long mode)
        {
            __Internal.VmdHypot(n, a, b, r, mode);
        }

        public static void VsErfc(int n, float[] a, float[] r)
        {
            __Internal.VsErfc(n, a, r);
        }

        public static void VdErfc(int n, double[] a, double[] r)
        {
            __Internal.VdErfc(n, a, r);
        }

        public static void VmsErfc(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsErfc(n, a, r, mode);
        }

        public static void VmdErfc(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdErfc(n, a, r, mode);
        }

        public static void VsErfcInv(int n, float[] a, float[] r)
        {
            __Internal.VsErfcInv(n, a, r);
        }

        public static void VdErfcInv(int n, double[] a, double[] r)
        {
            __Internal.VdErfcInv(n, a, r);
        }

        public static void VmsErfcInv(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsErfcInv(n, a, r, mode);
        }

        public static void VmdErfcInv(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdErfcInv(n, a, r, mode);
        }

        public static void VsCdfNorm(int n, float[] a, float[] r)
        {
            __Internal.VsCdfNorm(n, a, r);
        }

        public static void VdCdfNorm(int n, double[] a, double[] r)
        {
            __Internal.VdCdfNorm(n, a, r);
        }

        public static void VmsCdfNorm(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsCdfNorm(n, a, r, mode);
        }

        public static void VmdCdfNorm(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdCdfNorm(n, a, r, mode);
        }

        public static void VsCdfNormInv(int n, float[] a, float[] r)
        {
            __Internal.VsCdfNormInv(n, a, r);
        }

        public static void VdCdfNormInv(int n, double[] a, double[] r)
        {
            __Internal.VdCdfNormInv(n, a, r);
        }

        public static void VmsCdfNormInv(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsCdfNormInv(n, a, r, mode);
        }

        public static void VmdCdfNormInv(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdCdfNormInv(n, a, r, mode);
        }

        public static void VsLGamma(int n, float[] a, float[] r)
        {
            __Internal.VsLGamma(n, a, r);
        }

        public static void VdLGamma(int n, double[] a, double[] r)
        {
            __Internal.VdLGamma(n, a, r);
        }

        public static void VmsLGamma(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsLGamma(n, a, r, mode);
        }

        public static void VmdLGamma(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdLGamma(n, a, r, mode);
        }

        public static void VsTGamma(int n, float[] a, float[] r)
        {
            __Internal.VsTGamma(n, a, r);
        }

        public static void VdTGamma(int n, double[] a, double[] r)
        {
            __Internal.VdTGamma(n, a, r);
        }

        public static void VmsTGamma(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsTGamma(n, a, r, mode);
        }

        public static void VmdTGamma(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdTGamma(n, a, r, mode);
        }

        public static void VsAtan2(int n, float[] a, float[] b, float[] r)
        {
            __Internal.VsAtan2(n, a, b, r);
        }

        public static void VdAtan2(int n, double[] a, double[] b, double[] r)
        {
            __Internal.VdAtan2(n, a, b, r);
        }

        public static void VmsAtan2(int n, float[] a, float[] b, float[] r, long mode)
        {
            __Internal.VmsAtan2(n, a, b, r, mode);
        }

        public static void VmdAtan2(int n, double[] a, double[] b, double[] r, long mode)
        {
            __Internal.VmdAtan2(n, a, b, r, mode);
        }

        public static void VsAtan2pi(int n, float[] a, float[] b, float[] r)
        {
            __Internal.VsAtan2pi(n, a, b, r);
        }

        public static void VdAtan2pi(int n, double[] a, double[] b, double[] r)
        {
            __Internal.VdAtan2pi(n, a, b, r);
        }

        public static void VmsAtan2pi(int n, float[] a, float[] b, float[] r, long mode)
        {
            __Internal.VmsAtan2pi(n, a, b, r, mode);
        }

        public static void VmdAtan2pi(int n, double[] a, double[] b, double[] r, long mode)
        {
            __Internal.VmdAtan2pi(n, a, b, r, mode);
        }

        public static void VsMul(int n, float[] a, float[] b, float[] r)
        {
            __Internal.VsMul(n, a, b, r);
        }

        public static void VdMul(int n, double[] a, double[] b, double[] r)
        {
            __Internal.VdMul(n, a, b, r);
        }

        public static void VmsMul(int n, float[] a, float[] b, float[] r, long mode)
        {
            __Internal.VmsMul(n, a, b, r, mode);
        }

        public static void VmdMul(int n, double[] a, double[] b, double[] r, long mode)
        {
            __Internal.VmdMul(n, a, b, r, mode);
        }

        public static void VcMul(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] b, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex8.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VcMul(n, __arg1, __arg2, __arg3);
        }

        public static void VzMul(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] b, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex16.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VzMul(n, __arg1, __arg2, __arg3);
        }

        public static void VmcMul(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] b, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex8.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VmcMul(n, __arg1, __arg2, __arg3, mode);
        }

        public static void VmzMul(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] b, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex16.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VmzMul(n, __arg1, __arg2, __arg3, mode);
        }

        public static void VsDiv(int n, float[] a, float[] b, float[] r)
        {
            __Internal.VsDiv(n, a, b, r);
        }

        public static void VdDiv(int n, double[] a, double[] b, double[] r)
        {
            __Internal.VdDiv(n, a, b, r);
        }

        public static void VmsDiv(int n, float[] a, float[] b, float[] r, long mode)
        {
            __Internal.VmsDiv(n, a, b, r, mode);
        }

        public static void VmdDiv(int n, double[] a, double[] b, double[] r, long mode)
        {
            __Internal.VmdDiv(n, a, b, r, mode);
        }

        public static void VcDiv(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] b, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex8.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VcDiv(n, __arg1, __arg2, __arg3);
        }

        public static void VzDiv(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] b, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex16.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VzDiv(n, __arg1, __arg2, __arg3);
        }

        public static void VmcDiv(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] b, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex8.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VmcDiv(n, __arg1, __arg2, __arg3, mode);
        }

        public static void VmzDiv(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] b, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex16.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VmzDiv(n, __arg1, __arg2, __arg3, mode);
        }

        public static void VsPow(int n, float[] a, float[] b, float[] r)
        {
            __Internal.VsPow(n, a, b, r);
        }

        public static void VdPow(int n, double[] a, double[] b, double[] r)
        {
            __Internal.VdPow(n, a, b, r);
        }

        public static void VmsPow(int n, float[] a, float[] b, float[] r, long mode)
        {
            __Internal.VmsPow(n, a, b, r, mode);
        }

        public static void VmdPow(int n, double[] a, double[] b, double[] r, long mode)
        {
            __Internal.VmdPow(n, a, b, r, mode);
        }

        public static void VcPow(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] b, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex8.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VcPow(n, __arg1, __arg2, __arg3);
        }

        public static void VzPow(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] b, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex16.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VzPow(n, __arg1, __arg2, __arg3);
        }

        public static void VmcPow(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] b, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex8.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VmcPow(n, __arg1, __arg2, __arg3, mode);
        }

        public static void VmzPow(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] b, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex16.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VmzPow(n, __arg1, __arg2, __arg3, mode);
        }

        public static void VsPow3o2(int n, float[] a, float[] r)
        {
            __Internal.VsPow3o2(n, a, r);
        }

        public static void VdPow3o2(int n, double[] a, double[] r)
        {
            __Internal.VdPow3o2(n, a, r);
        }

        public static void VmsPow3o2(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsPow3o2(n, a, r, mode);
        }

        public static void VmdPow3o2(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdPow3o2(n, a, r, mode);
        }

        public static void VsPow2o3(int n, float[] a, float[] r)
        {
            __Internal.VsPow2o3(n, a, r);
        }

        public static void VdPow2o3(int n, double[] a, double[] r)
        {
            __Internal.VdPow2o3(n, a, r);
        }

        public static void VmsPow2o3(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsPow2o3(n, a, r, mode);
        }

        public static void VmdPow2o3(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdPow2o3(n, a, r, mode);
        }

        public static void VsPowx(int n, float[] a, float b, float[] r)
        {
            __Internal.VsPowx(n, a, b, r);
        }

        public static void VdPowx(int n, double[] a, double b, double[] r)
        {
            __Internal.VdPowx(n, a, b, r);
        }

        public static void VmsPowx(int n, float[] a, float b, float[] r, long mode)
        {
            __Internal.VmsPowx(n, a, b, r, mode);
        }

        public static void VmdPowx(int n, double[] a, double b, double[] r, long mode)
        {
            __Internal.VmdPowx(n, a, b, r, mode);
        }

        public static void VsPowr(int n, float[] a, float[] b, float[] r)
        {
            __Internal.VsPowr(n, a, b, r);
        }

        public static void VdPowr(int n, double[] a, double[] b, double[] r)
        {
            __Internal.VdPowr(n, a, b, r);
        }

        public static void VmsPowr(int n, float[] a, float[] b, float[] r, long mode)
        {
            __Internal.VmsPowr(n, a, b, r, mode);
        }

        public static void VmdPowr(int n, double[] a, double[] b, double[] r, long mode)
        {
            __Internal.VmdPowr(n, a, b, r, mode);
        }

        public static void VsSinCos(int n, float[] a, float[] r1, float[] r2)
        {
            __Internal.VsSinCos(n, a, r1, r2);
        }

        public static void VdSinCos(int n, double[] a, double[] r1, double[] r2)
        {
            __Internal.VdSinCos(n, a, r1, r2);
        }

        public static void VmsSinCos(int n, float[] a, float[] r1, float[] r2, long mode)
        {
            __Internal.VmsSinCos(n, a, r1, r2, mode);
        }

        public static void VmdSinCos(int n, double[] a, double[] r1, double[] r2, long mode)
        {
            __Internal.VmdSinCos(n, a, r1, r2, mode);
        }

        public static void VsLinearFrac(int n, float[] a, float[] b, float scalea, float shifta, float scaleb, float shiftb, float[] r)
        {
            __Internal.VsLinearFrac(n, a, b, scalea, shifta, scaleb, shiftb, r);
        }

        public static void VdLinearFrac(int n, double[] a, double[] b, double scalea, double shifta, double scaleb, double shiftb, double[] r)
        {
            __Internal.VdLinearFrac(n, a, b, scalea, shifta, scaleb, shiftb, r);
        }

        public static void VmsLinearFrac(int n, float[] a, float[] b, float scalea, float shifta, float scaleb, float shiftb, float[] r, long mode)
        {
            __Internal.VmsLinearFrac(n, a, b, scalea, shifta, scaleb, shiftb, r, mode);
        }

        public static void VmdLinearFrac(int n, double[] a, double[] b, double scalea, double shifta, double scaleb, double shiftb, double[] r, long mode)
        {
            __Internal.VmdLinearFrac(n, a, b, scalea, shifta, scaleb, shiftb, r, mode);
        }

        public static void VsCeil(int n, float[] a, float[] r)
        {
            __Internal.VsCeil(n, a, r);
        }

        public static void VdCeil(int n, double[] a, double[] r)
        {
            __Internal.VdCeil(n, a, r);
        }

        public static void VmsCeil(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsCeil(n, a, r, mode);
        }

        public static void VmdCeil(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdCeil(n, a, r, mode);
        }

        public static void VsFloor(int n, float[] a, float[] r)
        {
            __Internal.VsFloor(n, a, r);
        }

        public static void VdFloor(int n, double[] a, double[] r)
        {
            __Internal.VdFloor(n, a, r);
        }

        public static void VmsFloor(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsFloor(n, a, r, mode);
        }

        public static void VmdFloor(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdFloor(n, a, r, mode);
        }

        public static void VsFrac(int n, float[] a, float[] r)
        {
            __Internal.VsFrac(n, a, r);
        }

        public static void VdFrac(int n, double[] a, double[] r)
        {
            __Internal.VdFrac(n, a, r);
        }

        public static void VmsFrac(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsFrac(n, a, r, mode);
        }

        public static void VmdFrac(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdFrac(n, a, r, mode);
        }

        public static void VsModf(int n, float[] a, float[] r1, float[] r2)
        {
            __Internal.VsModf(n, a, r1, r2);
        }

        public static void VdModf(int n, double[] a, double[] r1, double[] r2)
        {
            __Internal.VdModf(n, a, r1, r2);
        }

        public static void VmsModf(int n, float[] a, float[] r1, float[] r2, long mode)
        {
            __Internal.VmsModf(n, a, r1, r2, mode);
        }

        public static void VmdModf(int n, double[] a, double[] r1, double[] r2, long mode)
        {
            __Internal.VmdModf(n, a, r1, r2, mode);
        }

        public static void VsFmod(int n, float[] a, float[] r1, float[] r2)
        {
            __Internal.VsFmod(n, a, r1, r2);
        }

        public static void VdFmod(int n, double[] a, double[] r1, double[] r2)
        {
            __Internal.VdFmod(n, a, r1, r2);
        }

        public static void VmsFmod(int n, float[] a, float[] r1, float[] r2, long mode)
        {
            __Internal.VmsFmod(n, a, r1, r2, mode);
        }

        public static void VmdFmod(int n, double[] a, double[] r1, double[] r2, long mode)
        {
            __Internal.VmdFmod(n, a, r1, r2, mode);
        }

        public static void VsRemainder(int n, float[] a, float[] r1, float[] r2)
        {
            __Internal.VsRemainder(n, a, r1, r2);
        }

        public static void VdRemainder(int n, double[] a, double[] r1, double[] r2)
        {
            __Internal.VdRemainder(n, a, r1, r2);
        }

        public static void VmsRemainder(int n, float[] a, float[] r1, float[] r2, long mode)
        {
            __Internal.VmsRemainder(n, a, r1, r2, mode);
        }

        public static void VmdRemainder(int n, double[] a, double[] r1, double[] r2, long mode)
        {
            __Internal.VmdRemainder(n, a, r1, r2, mode);
        }

        public static void VsNextAfter(int n, float[] a, float[] r1, float[] r2)
        {
            __Internal.VsNextAfter(n, a, r1, r2);
        }

        public static void VdNextAfter(int n, double[] a, double[] r1, double[] r2)
        {
            __Internal.VdNextAfter(n, a, r1, r2);
        }

        public static void VmsNextAfter(int n, float[] a, float[] r1, float[] r2, long mode)
        {
            __Internal.VmsNextAfter(n, a, r1, r2, mode);
        }

        public static void VmdNextAfter(int n, double[] a, double[] r1, double[] r2, long mode)
        {
            __Internal.VmdNextAfter(n, a, r1, r2, mode);
        }

        public static void VsCopySign(int n, float[] a, float[] r1, float[] r2)
        {
            __Internal.VsCopySign(n, a, r1, r2);
        }

        public static void VdCopySign(int n, double[] a, double[] r1, double[] r2)
        {
            __Internal.VdCopySign(n, a, r1, r2);
        }

        public static void VmsCopySign(int n, float[] a, float[] r1, float[] r2, long mode)
        {
            __Internal.VmsCopySign(n, a, r1, r2, mode);
        }

        public static void VmdCopySign(int n, double[] a, double[] r1, double[] r2, long mode)
        {
            __Internal.VmdCopySign(n, a, r1, r2, mode);
        }

        public static void VsFdim(int n, float[] a, float[] r1, float[] r2)
        {
            __Internal.VsFdim(n, a, r1, r2);
        }

        public static void VdFdim(int n, double[] a, double[] r1, double[] r2)
        {
            __Internal.VdFdim(n, a, r1, r2);
        }

        public static void VmsFdim(int n, float[] a, float[] r1, float[] r2, long mode)
        {
            __Internal.VmsFdim(n, a, r1, r2, mode);
        }

        public static void VmdFdim(int n, double[] a, double[] r1, double[] r2, long mode)
        {
            __Internal.VmdFdim(n, a, r1, r2, mode);
        }

        public static void VsFmax(int n, float[] a, float[] r1, float[] r2)
        {
            __Internal.VsFmax(n, a, r1, r2);
        }

        public static void VdFmax(int n, double[] a, double[] r1, double[] r2)
        {
            __Internal.VdFmax(n, a, r1, r2);
        }

        public static void VmsFmax(int n, float[] a, float[] r1, float[] r2, long mode)
        {
            __Internal.VmsFmax(n, a, r1, r2, mode);
        }

        public static void VmdFmax(int n, double[] a, double[] r1, double[] r2, long mode)
        {
            __Internal.VmdFmax(n, a, r1, r2, mode);
        }

        public static void VsFmin(int n, float[] a, float[] r1, float[] r2)
        {
            __Internal.VsFmin(n, a, r1, r2);
        }

        public static void VdFmin(int n, double[] a, double[] r1, double[] r2)
        {
            __Internal.VdFmin(n, a, r1, r2);
        }

        public static void VmsFmin(int n, float[] a, float[] r1, float[] r2, long mode)
        {
            __Internal.VmsFmin(n, a, r1, r2, mode);
        }

        public static void VmdFmin(int n, double[] a, double[] r1, double[] r2, long mode)
        {
            __Internal.VmdFmin(n, a, r1, r2, mode);
        }

        public static void VsMaxMag(int n, float[] a, float[] r1, float[] r2)
        {
            __Internal.VsMaxMag(n, a, r1, r2);
        }

        public static void VdMaxMag(int n, double[] a, double[] r1, double[] r2)
        {
            __Internal.VdMaxMag(n, a, r1, r2);
        }

        public static void VmsMaxMag(int n, float[] a, float[] r1, float[] r2, long mode)
        {
            __Internal.VmsMaxMag(n, a, r1, r2, mode);
        }

        public static void VmdMaxMag(int n, double[] a, double[] r1, double[] r2, long mode)
        {
            __Internal.VmdMaxMag(n, a, r1, r2, mode);
        }

        public static void VsMinMag(int n, float[] a, float[] r1, float[] r2)
        {
            __Internal.VsMinMag(n, a, r1, r2);
        }

        public static void VdMinMag(int n, double[] a, double[] r1, double[] r2)
        {
            __Internal.VdMinMag(n, a, r1, r2);
        }

        public static void VmsMinMag(int n, float[] a, float[] r1, float[] r2, long mode)
        {
            __Internal.VmsMinMag(n, a, r1, r2, mode);
        }

        public static void VmdMinMag(int n, double[] a, double[] r1, double[] r2, long mode)
        {
            __Internal.VmdMinMag(n, a, r1, r2, mode);
        }

        public static void VsNearbyInt(int n, float[] a, float[] r)
        {
            __Internal.VsNearbyInt(n, a, r);
        }

        public static void VdNearbyInt(int n, double[] a, double[] r)
        {
            __Internal.VdNearbyInt(n, a, r);
        }

        public static void VmsNearbyInt(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsNearbyInt(n, a, r, mode);
        }

        public static void VmdNearbyInt(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdNearbyInt(n, a, r, mode);
        }

        public static void VsRint(int n, float[] a, float[] r)
        {
            __Internal.VsRint(n, a, r);
        }

        public static void VdRint(int n, double[] a, double[] r)
        {
            __Internal.VdRint(n, a, r);
        }

        public static void VmsRint(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsRint(n, a, r, mode);
        }

        public static void VmdRint(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdRint(n, a, r, mode);
        }

        public static void VsRound(int n, float[] a, float[] r)
        {
            __Internal.VsRound(n, a, r);
        }

        public static void VdRound(int n, double[] a, double[] r)
        {
            __Internal.VdRound(n, a, r);
        }

        public static void VmsRound(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsRound(n, a, r, mode);
        }

        public static void VmdRound(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdRound(n, a, r, mode);
        }

        public static void VsTrunc(int n, float[] a, float[] r)
        {
            __Internal.VsTrunc(n, a, r);
        }

        public static void VdTrunc(int n, double[] a, double[] r)
        {
            __Internal.VdTrunc(n, a, r);
        }

        public static void VmsTrunc(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsTrunc(n, a, r, mode);
        }

        public static void VmdTrunc(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdTrunc(n, a, r, mode);
        }

        public static void VcConj(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VcConj(n, __arg1, __arg2);
        }

        public static void VzConj(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VzConj(n, __arg1, __arg2);
        }

        public static void VmcConj(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmcConj(n, __arg1, __arg2, mode);
        }

        public static void VmzConj(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmzConj(n, __arg1, __arg2, mode);
        }

        public static void VcMulByConj(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] b, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex8.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VcMulByConj(n, __arg1, __arg2, __arg3);
        }

        public static void VzMulByConj(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] b, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex16.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VzMulByConj(n, __arg1, __arg2, __arg3);
        }

        public static void VmcMulByConj(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] b, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex8.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VmcMulByConj(n, __arg1, __arg2, __arg3, mode);
        }

        public static void VmzMulByConj(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] b, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __b;
            if (ReferenceEquals(b, null))
                __b = null;
            else
            {
                __b = new global::IntelMKL.MKL_Complex16.__Internal[b.Length];
                for (int i = 0; i < __b.Length; i++)
                {
                    var __element = b[i];
                    __b[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __b;
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __r;
            __Internal.VmzMulByConj(n, __arg1, __arg2, __arg3, mode);
        }

        public static void VcCIS(int n, float[] a, global::IntelMKL.MKL_Complex8[] r)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VcCIS(n, a, __arg2);
        }

        public static void VzCIS(int n, double[] a, global::IntelMKL.MKL_Complex16[] r)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VzCIS(n, a, __arg2);
        }

        public static void VmcCIS(int n, float[] a, global::IntelMKL.MKL_Complex8[] r, long mode)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex8.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmcCIS(n, a, __arg2, mode);
        }

        public static void VmzCIS(int n, double[] a, global::IntelMKL.MKL_Complex16[] r, long mode)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __r;
            if (ReferenceEquals(r, null))
                __r = null;
            else
            {
                __r = new global::IntelMKL.MKL_Complex16.__Internal[r.Length];
                for (int i = 0; i < __r.Length; i++)
                {
                    var __element = r[i];
                    __r[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __r;
            __Internal.VmzCIS(n, a, __arg2, mode);
        }

        public static void VsExpInt1(int n, float[] a, float[] r)
        {
            __Internal.VsExpInt1(n, a, r);
        }

        public static void VdExpInt1(int n, double[] a, double[] r)
        {
            __Internal.VdExpInt1(n, a, r);
        }

        public static void VmsExpInt1(int n, float[] a, float[] r, long mode)
        {
            __Internal.VmsExpInt1(n, a, r, mode);
        }

        public static void VmdExpInt1(int n, double[] a, double[] r, long mode)
        {
            __Internal.VmdExpInt1(n, a, r, mode);
        }

        public static void VsPackI(int n, float[] a, int incra, float[] y)
        {
            __Internal.VsPackI(n, a, incra, y);
        }

        public static void VdPackI(int n, double[] a, int incra, double[] y)
        {
            __Internal.VdPackI(n, a, incra, y);
        }

        public static void VcPackI(int n, global::IntelMKL.MKL_Complex8[] a, int incra, global::IntelMKL.MKL_Complex8[] y)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __y;
            if (ReferenceEquals(y, null))
                __y = null;
            else
            {
                __y = new global::IntelMKL.MKL_Complex8.__Internal[y.Length];
                for (int i = 0; i < __y.Length; i++)
                {
                    var __element = y[i];
                    __y[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __y;
            __Internal.VcPackI(n, __arg1, incra, __arg3);
        }

        public static void VzPackI(int n, global::IntelMKL.MKL_Complex16[] a, int incra, global::IntelMKL.MKL_Complex16[] y)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __y;
            if (ReferenceEquals(y, null))
                __y = null;
            else
            {
                __y = new global::IntelMKL.MKL_Complex16.__Internal[y.Length];
                for (int i = 0; i < __y.Length; i++)
                {
                    var __element = y[i];
                    __y[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __y;
            __Internal.VzPackI(n, __arg1, incra, __arg3);
        }

        public static void VsPackV(int n, float[] a, int[] ia, float[] y)
        {
            __Internal.VsPackV(n, a, ia, y);
        }

        public static void VdPackV(int n, double[] a, int[] ia, double[] y)
        {
            __Internal.VdPackV(n, a, ia, y);
        }

        public static void VcPackV(int n, global::IntelMKL.MKL_Complex8[] a, int[] ia, global::IntelMKL.MKL_Complex8[] y)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __y;
            if (ReferenceEquals(y, null))
                __y = null;
            else
            {
                __y = new global::IntelMKL.MKL_Complex8.__Internal[y.Length];
                for (int i = 0; i < __y.Length; i++)
                {
                    var __element = y[i];
                    __y[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __y;
            __Internal.VcPackV(n, __arg1, ia, __arg3);
        }

        public static void VzPackV(int n, global::IntelMKL.MKL_Complex16[] a, int[] ia, global::IntelMKL.MKL_Complex16[] y)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __y;
            if (ReferenceEquals(y, null))
                __y = null;
            else
            {
                __y = new global::IntelMKL.MKL_Complex16.__Internal[y.Length];
                for (int i = 0; i < __y.Length; i++)
                {
                    var __element = y[i];
                    __y[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __y;
            __Internal.VzPackV(n, __arg1, ia, __arg3);
        }

        public static void VsPackM(int n, float[] a, int[] ma, float[] y)
        {
            __Internal.VsPackM(n, a, ma, y);
        }

        public static void VdPackM(int n, double[] a, int[] ma, double[] y)
        {
            __Internal.VdPackM(n, a, ma, y);
        }

        public static void VcPackM(int n, global::IntelMKL.MKL_Complex8[] a, int[] ma, global::IntelMKL.MKL_Complex8[] y)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __y;
            if (ReferenceEquals(y, null))
                __y = null;
            else
            {
                __y = new global::IntelMKL.MKL_Complex8.__Internal[y.Length];
                for (int i = 0; i < __y.Length; i++)
                {
                    var __element = y[i];
                    __y[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __y;
            __Internal.VcPackM(n, __arg1, ma, __arg3);
        }

        public static void VzPackM(int n, global::IntelMKL.MKL_Complex16[] a, int[] ma, global::IntelMKL.MKL_Complex16[] y)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __y;
            if (ReferenceEquals(y, null))
                __y = null;
            else
            {
                __y = new global::IntelMKL.MKL_Complex16.__Internal[y.Length];
                for (int i = 0; i < __y.Length; i++)
                {
                    var __element = y[i];
                    __y[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg3 = __y;
            __Internal.VzPackM(n, __arg1, ma, __arg3);
        }

        public static void VsUnpackI(int n, float[] a, float[] y, int incry)
        {
            __Internal.VsUnpackI(n, a, y, incry);
        }

        public static void VdUnpackI(int n, double[] a, double[] y, int incry)
        {
            __Internal.VdUnpackI(n, a, y, incry);
        }

        public static void VcUnpackI(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] y, int incry)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __y;
            if (ReferenceEquals(y, null))
                __y = null;
            else
            {
                __y = new global::IntelMKL.MKL_Complex8.__Internal[y.Length];
                for (int i = 0; i < __y.Length; i++)
                {
                    var __element = y[i];
                    __y[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __y;
            __Internal.VcUnpackI(n, __arg1, __arg2, incry);
        }

        public static void VzUnpackI(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] y, int incry)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __y;
            if (ReferenceEquals(y, null))
                __y = null;
            else
            {
                __y = new global::IntelMKL.MKL_Complex16.__Internal[y.Length];
                for (int i = 0; i < __y.Length; i++)
                {
                    var __element = y[i];
                    __y[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __y;
            __Internal.VzUnpackI(n, __arg1, __arg2, incry);
        }

        public static void VsUnpackV(int n, float[] a, float[] y, int[] iy)
        {
            __Internal.VsUnpackV(n, a, y, iy);
        }

        public static void VdUnpackV(int n, double[] a, double[] y, int[] iy)
        {
            __Internal.VdUnpackV(n, a, y, iy);
        }

        public static void VcUnpackV(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] y, int[] iy)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __y;
            if (ReferenceEquals(y, null))
                __y = null;
            else
            {
                __y = new global::IntelMKL.MKL_Complex8.__Internal[y.Length];
                for (int i = 0; i < __y.Length; i++)
                {
                    var __element = y[i];
                    __y[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __y;
            __Internal.VcUnpackV(n, __arg1, __arg2, iy);
        }

        public static void VzUnpackV(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] y, int[] iy)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __y;
            if (ReferenceEquals(y, null))
                __y = null;
            else
            {
                __y = new global::IntelMKL.MKL_Complex16.__Internal[y.Length];
                for (int i = 0; i < __y.Length; i++)
                {
                    var __element = y[i];
                    __y[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __y;
            __Internal.VzUnpackV(n, __arg1, __arg2, iy);
        }

        public static void VsUnpackM(int n, float[] a, float[] y, int[] my)
        {
            __Internal.VsUnpackM(n, a, y, my);
        }

        public static void VdUnpackM(int n, double[] a, double[] y, int[] my)
        {
            __Internal.VdUnpackM(n, a, y, my);
        }

        public static void VcUnpackM(int n, global::IntelMKL.MKL_Complex8[] a, global::IntelMKL.MKL_Complex8[] y, int[] my)
        {
            global::IntelMKL.MKL_Complex8.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex8.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex8.__Internal[] __y;
            if (ReferenceEquals(y, null))
                __y = null;
            else
            {
                __y = new global::IntelMKL.MKL_Complex8.__Internal[y.Length];
                for (int i = 0; i < __y.Length; i++)
                {
                    var __element = y[i];
                    __y[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex8.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __y;
            __Internal.VcUnpackM(n, __arg1, __arg2, my);
        }

        public static void VzUnpackM(int n, global::IntelMKL.MKL_Complex16[] a, global::IntelMKL.MKL_Complex16[] y, int[] my)
        {
            global::IntelMKL.MKL_Complex16.__Internal[] __a;
            if (ReferenceEquals(a, null))
                __a = null;
            else
            {
                __a = new global::IntelMKL.MKL_Complex16.__Internal[a.Length];
                for (int i = 0; i < __a.Length; i++)
                {
                    var __element = a[i];
                    __a[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg1 = __a;
            global::IntelMKL.MKL_Complex16.__Internal[] __y;
            if (ReferenceEquals(y, null))
                __y = null;
            else
            {
                __y = new global::IntelMKL.MKL_Complex16.__Internal[y.Length];
                for (int i = 0; i < __y.Length; i++)
                {
                    var __element = y[i];
                    __y[i] = ReferenceEquals(__element, null) ? new global::IntelMKL.MKL_Complex16.__Internal() :__element.__Instance;
                }
            }
            var __arg2 = __y;
            __Internal.VzUnpackM(n, __arg1, __arg2, my);
        }

        public static int VmlSetErrStatus(int status)
        {
            var __ret = __Internal.VmlSetErrStatus(status);
            return __ret;
        }

        public static int VmlGetErrStatus()
        {
            var __ret = __Internal.VmlGetErrStatus();
            return __ret;
        }

        public static int VmlClearErrStatus()
        {
            var __ret = __Internal.VmlClearErrStatus();
            return __ret;
        }

        public static global::IntelMKL.VMLErrorCallBack VmlSetErrorCallBack(global::IntelMKL.VMLErrorCallBack func)
        {
            var __arg0 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
            var __ret = __Internal.VmlSetErrorCallBack(__arg0);
            var __ptr0 = __ret;
            return __ptr0 == IntPtr.Zero? null : (global::IntelMKL.VMLErrorCallBack) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::IntelMKL.VMLErrorCallBack));
        }

        public static global::IntelMKL.VMLErrorCallBack VmlGetErrorCallBack()
        {
            var __ret = __Internal.VmlGetErrorCallBack();
            var __ptr0 = __ret;
            return __ptr0 == IntPtr.Zero? null : (global::IntelMKL.VMLErrorCallBack) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::IntelMKL.VMLErrorCallBack));
        }

        public static global::IntelMKL.VMLErrorCallBack VmlClearErrorCallBack()
        {
            var __ret = __Internal.VmlClearErrorCallBack();
            var __ptr0 = __ret;
            return __ptr0 == IntPtr.Zero? null : (global::IntelMKL.VMLErrorCallBack) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::IntelMKL.VMLErrorCallBack));
        }

        public static uint VmlSetMode(uint newmode)
        {
            var __ret = __Internal.VmlSetMode(newmode);
            return __ret;
        }

        public static uint VmlGetMode()
        {
            var __ret = __Internal.VmlGetMode();
            return __ret;
        }
    }
}
