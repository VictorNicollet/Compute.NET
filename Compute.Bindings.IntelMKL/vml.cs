// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace IntelMKL
{
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int VMLErrorCallBack(global::System.IntPtr pdefVmlErrorContext);

    public unsafe partial class DefVmlErrorContext : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 144)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int iCode;

            [FieldOffset(4)]
            internal int iIndex;

            [FieldOffset(8)]
            internal double dbA1;

            [FieldOffset(16)]
            internal double dbA2;

            [FieldOffset(24)]
            internal double dbR1;

            [FieldOffset(32)]
            internal double dbR2;

            [FieldOffset(40)]
            internal fixed sbyte cFuncName[64];

            [FieldOffset(104)]
            internal int iFuncNameLen;

            [FieldOffset(112)]
            internal double dbA1Im;

            [FieldOffset(120)]
            internal double dbA2Im;

            [FieldOffset(128)]
            internal double dbR1Im;

            [FieldOffset(136)]
            internal double dbR2Im;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_DefVmlErrorContext@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::IntelMKL.DefVmlErrorContext> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::IntelMKL.DefVmlErrorContext>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::IntelMKL.DefVmlErrorContext __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::IntelMKL.DefVmlErrorContext(native.ToPointer(), skipVTables);
        }

        internal static global::IntelMKL.DefVmlErrorContext __CreateInstance(global::IntelMKL.DefVmlErrorContext.__Internal native, bool skipVTables = false)
        {
            return new global::IntelMKL.DefVmlErrorContext(native, skipVTables);
        }

        private static void* __CopyValue(global::IntelMKL.DefVmlErrorContext.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::IntelMKL.DefVmlErrorContext.__Internal));
            *(global::IntelMKL.DefVmlErrorContext.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DefVmlErrorContext(global::IntelMKL.DefVmlErrorContext.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DefVmlErrorContext(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DefVmlErrorContext()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::IntelMKL.DefVmlErrorContext.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DefVmlErrorContext(global::IntelMKL.DefVmlErrorContext _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::IntelMKL.DefVmlErrorContext.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::IntelMKL.DefVmlErrorContext.__Internal*) __Instance) = *((global::IntelMKL.DefVmlErrorContext.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::IntelMKL.DefVmlErrorContext __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class Vml
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAbs")]
            internal static extern void VsAbs(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAbs")]
            internal static extern void VdAbs(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAbs")]
            internal static extern void VmsAbs(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAbs")]
            internal static extern void VmdAbs(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAdd")]
            internal static extern void VsAdd(int n, float* a, float* b, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAdd")]
            internal static extern void VdAdd(int n, double* a, double* b, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAdd")]
            internal static extern void VmsAdd(int n, float* a, float* b, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAdd")]
            internal static extern void VmdAdd(int n, double* a, double* b, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsSub")]
            internal static extern void VsSub(int n, float* a, float* b, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdSub")]
            internal static extern void VdSub(int n, double* a, double* b, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsSub")]
            internal static extern void VmsSub(int n, float* a, float* b, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdSub")]
            internal static extern void VmdSub(int n, double* a, double* b, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsInv")]
            internal static extern void VsInv(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdInv")]
            internal static extern void VdInv(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsInv")]
            internal static extern void VmsInv(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdInv")]
            internal static extern void VmdInv(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsSqrt")]
            internal static extern void VsSqrt(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdSqrt")]
            internal static extern void VdSqrt(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsSqrt")]
            internal static extern void VmsSqrt(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdSqrt")]
            internal static extern void VmdSqrt(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsInvSqrt")]
            internal static extern void VsInvSqrt(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdInvSqrt")]
            internal static extern void VdInvSqrt(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsInvSqrt")]
            internal static extern void VmsInvSqrt(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdInvSqrt")]
            internal static extern void VmdInvSqrt(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsCbrt")]
            internal static extern void VsCbrt(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdCbrt")]
            internal static extern void VdCbrt(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsCbrt")]
            internal static extern void VmsCbrt(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdCbrt")]
            internal static extern void VmdCbrt(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsInvCbrt")]
            internal static extern void VsInvCbrt(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdInvCbrt")]
            internal static extern void VdInvCbrt(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsInvCbrt")]
            internal static extern void VmsInvCbrt(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdInvCbrt")]
            internal static extern void VmdInvCbrt(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsSqr")]
            internal static extern void VsSqr(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdSqr")]
            internal static extern void VdSqr(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsSqr")]
            internal static extern void VmsSqr(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdSqr")]
            internal static extern void VmdSqr(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsExp")]
            internal static extern void VsExp(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdExp")]
            internal static extern void VdExp(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsExp")]
            internal static extern void VmsExp(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdExp")]
            internal static extern void VmdExp(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsExp2")]
            internal static extern void VsExp2(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdExp2")]
            internal static extern void VdExp2(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsExp2")]
            internal static extern void VmsExp2(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdExp2")]
            internal static extern void VmdExp2(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsExp10")]
            internal static extern void VsExp10(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdExp10")]
            internal static extern void VdExp10(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsExp10")]
            internal static extern void VmsExp10(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdExp10")]
            internal static extern void VmdExp10(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsExpm1")]
            internal static extern void VsExpm1(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdExpm1")]
            internal static extern void VdExpm1(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsExpm1")]
            internal static extern void VmsExpm1(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdExpm1")]
            internal static extern void VmdExpm1(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsLn")]
            internal static extern void VsLn(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdLn")]
            internal static extern void VdLn(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsLn")]
            internal static extern void VmsLn(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdLn")]
            internal static extern void VmdLn(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsLog2")]
            internal static extern void VsLog2(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdLog2")]
            internal static extern void VdLog2(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsLog2")]
            internal static extern void VmsLog2(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdLog2")]
            internal static extern void VmdLog2(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsLog10")]
            internal static extern void VsLog10(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdLog10")]
            internal static extern void VdLog10(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsLog10")]
            internal static extern void VmsLog10(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdLog10")]
            internal static extern void VmdLog10(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsLog1p")]
            internal static extern void VsLog1p(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdLog1p")]
            internal static extern void VdLog1p(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsLog1p")]
            internal static extern void VmsLog1p(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdLog1p")]
            internal static extern void VmdLog1p(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsLogb")]
            internal static extern void VsLogb(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdLogb")]
            internal static extern void VdLogb(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsLogb")]
            internal static extern void VmsLogb(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdLogb")]
            internal static extern void VmdLogb(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsCos")]
            internal static extern void VsCos(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdCos")]
            internal static extern void VdCos(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsCos")]
            internal static extern void VmsCos(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdCos")]
            internal static extern void VmdCos(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsSin")]
            internal static extern void VsSin(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdSin")]
            internal static extern void VdSin(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsSin")]
            internal static extern void VmsSin(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdSin")]
            internal static extern void VmdSin(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsTan")]
            internal static extern void VsTan(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdTan")]
            internal static extern void VdTan(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsTan")]
            internal static extern void VmsTan(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdTan")]
            internal static extern void VmdTan(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsCospi")]
            internal static extern void VsCospi(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdCospi")]
            internal static extern void VdCospi(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsCospi")]
            internal static extern void VmsCospi(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdCospi")]
            internal static extern void VmdCospi(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsSinpi")]
            internal static extern void VsSinpi(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdSinpi")]
            internal static extern void VdSinpi(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsSinpi")]
            internal static extern void VmsSinpi(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdSinpi")]
            internal static extern void VmdSinpi(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsTanpi")]
            internal static extern void VsTanpi(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdTanpi")]
            internal static extern void VdTanpi(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsTanpi")]
            internal static extern void VmsTanpi(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdTanpi")]
            internal static extern void VmdTanpi(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsCosd")]
            internal static extern void VsCosd(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdCosd")]
            internal static extern void VdCosd(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsCosd")]
            internal static extern void VmsCosd(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdCosd")]
            internal static extern void VmdCosd(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsSind")]
            internal static extern void VsSind(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdSind")]
            internal static extern void VdSind(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsSind")]
            internal static extern void VmsSind(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdSind")]
            internal static extern void VmdSind(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsTand")]
            internal static extern void VsTand(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdTand")]
            internal static extern void VdTand(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsTand")]
            internal static extern void VmsTand(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdTand")]
            internal static extern void VmdTand(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsCosh")]
            internal static extern void VsCosh(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdCosh")]
            internal static extern void VdCosh(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsCosh")]
            internal static extern void VmsCosh(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdCosh")]
            internal static extern void VmdCosh(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsSinh")]
            internal static extern void VsSinh(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdSinh")]
            internal static extern void VdSinh(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsSinh")]
            internal static extern void VmsSinh(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdSinh")]
            internal static extern void VmdSinh(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsTanh")]
            internal static extern void VsTanh(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdTanh")]
            internal static extern void VdTanh(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsTanh")]
            internal static extern void VmsTanh(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdTanh")]
            internal static extern void VmdTanh(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAcos")]
            internal static extern void VsAcos(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAcos")]
            internal static extern void VdAcos(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAcos")]
            internal static extern void VmsAcos(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAcos")]
            internal static extern void VmdAcos(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAsin")]
            internal static extern void VsAsin(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAsin")]
            internal static extern void VdAsin(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAsin")]
            internal static extern void VmsAsin(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAsin")]
            internal static extern void VmdAsin(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAtan")]
            internal static extern void VsAtan(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAtan")]
            internal static extern void VdAtan(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAtan")]
            internal static extern void VmsAtan(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAtan")]
            internal static extern void VmdAtan(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAcospi")]
            internal static extern void VsAcospi(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAcospi")]
            internal static extern void VdAcospi(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAcospi")]
            internal static extern void VmsAcospi(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAcospi")]
            internal static extern void VmdAcospi(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAsinpi")]
            internal static extern void VsAsinpi(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAsinpi")]
            internal static extern void VdAsinpi(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAsinpi")]
            internal static extern void VmsAsinpi(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAsinpi")]
            internal static extern void VmdAsinpi(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAtanpi")]
            internal static extern void VsAtanpi(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAtanpi")]
            internal static extern void VdAtanpi(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAtanpi")]
            internal static extern void VmsAtanpi(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAtanpi")]
            internal static extern void VmdAtanpi(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAcosh")]
            internal static extern void VsAcosh(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAcosh")]
            internal static extern void VdAcosh(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAcosh")]
            internal static extern void VmsAcosh(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAcosh")]
            internal static extern void VmdAcosh(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAsinh")]
            internal static extern void VsAsinh(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAsinh")]
            internal static extern void VdAsinh(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAsinh")]
            internal static extern void VmsAsinh(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAsinh")]
            internal static extern void VmdAsinh(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAtanh")]
            internal static extern void VsAtanh(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAtanh")]
            internal static extern void VdAtanh(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAtanh")]
            internal static extern void VmsAtanh(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAtanh")]
            internal static extern void VmdAtanh(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsErf")]
            internal static extern void VsErf(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdErf")]
            internal static extern void VdErf(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsErf")]
            internal static extern void VmsErf(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdErf")]
            internal static extern void VmdErf(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsErfInv")]
            internal static extern void VsErfInv(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdErfInv")]
            internal static extern void VdErfInv(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsErfInv")]
            internal static extern void VmsErfInv(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdErfInv")]
            internal static extern void VmdErfInv(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsHypot")]
            internal static extern void VsHypot(int n, float* a, float* b, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdHypot")]
            internal static extern void VdHypot(int n, double* a, double* b, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsHypot")]
            internal static extern void VmsHypot(int n, float* a, float* b, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdHypot")]
            internal static extern void VmdHypot(int n, double* a, double* b, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsErfc")]
            internal static extern void VsErfc(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdErfc")]
            internal static extern void VdErfc(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsErfc")]
            internal static extern void VmsErfc(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdErfc")]
            internal static extern void VmdErfc(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsErfcInv")]
            internal static extern void VsErfcInv(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdErfcInv")]
            internal static extern void VdErfcInv(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsErfcInv")]
            internal static extern void VmsErfcInv(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdErfcInv")]
            internal static extern void VmdErfcInv(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsCdfNorm")]
            internal static extern void VsCdfNorm(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdCdfNorm")]
            internal static extern void VdCdfNorm(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsCdfNorm")]
            internal static extern void VmsCdfNorm(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdCdfNorm")]
            internal static extern void VmdCdfNorm(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsCdfNormInv")]
            internal static extern void VsCdfNormInv(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdCdfNormInv")]
            internal static extern void VdCdfNormInv(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsCdfNormInv")]
            internal static extern void VmsCdfNormInv(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdCdfNormInv")]
            internal static extern void VmdCdfNormInv(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsLGamma")]
            internal static extern void VsLGamma(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdLGamma")]
            internal static extern void VdLGamma(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsLGamma")]
            internal static extern void VmsLGamma(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdLGamma")]
            internal static extern void VmdLGamma(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsTGamma")]
            internal static extern void VsTGamma(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdTGamma")]
            internal static extern void VdTGamma(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsTGamma")]
            internal static extern void VmsTGamma(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdTGamma")]
            internal static extern void VmdTGamma(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAtan2")]
            internal static extern void VsAtan2(int n, float* a, float* b, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAtan2")]
            internal static extern void VdAtan2(int n, double* a, double* b, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAtan2")]
            internal static extern void VmsAtan2(int n, float* a, float* b, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAtan2")]
            internal static extern void VmdAtan2(int n, double* a, double* b, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsAtan2pi")]
            internal static extern void VsAtan2pi(int n, float* a, float* b, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdAtan2pi")]
            internal static extern void VdAtan2pi(int n, double* a, double* b, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsAtan2pi")]
            internal static extern void VmsAtan2pi(int n, float* a, float* b, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdAtan2pi")]
            internal static extern void VmdAtan2pi(int n, double* a, double* b, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsMul")]
            internal static extern void VsMul(int n, float* a, float* b, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdMul")]
            internal static extern void VdMul(int n, double* a, double* b, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsMul")]
            internal static extern void VmsMul(int n, float* a, float* b, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdMul")]
            internal static extern void VmdMul(int n, double* a, double* b, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsDiv")]
            internal static extern void VsDiv(int n, float* a, float* b, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdDiv")]
            internal static extern void VdDiv(int n, double* a, double* b, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsDiv")]
            internal static extern void VmsDiv(int n, float* a, float* b, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdDiv")]
            internal static extern void VmdDiv(int n, double* a, double* b, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsPow")]
            internal static extern void VsPow(int n, float* a, float* b, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdPow")]
            internal static extern void VdPow(int n, double* a, double* b, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsPow")]
            internal static extern void VmsPow(int n, float* a, float* b, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdPow")]
            internal static extern void VmdPow(int n, double* a, double* b, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsPow3o2")]
            internal static extern void VsPow3o2(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdPow3o2")]
            internal static extern void VdPow3o2(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsPow3o2")]
            internal static extern void VmsPow3o2(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdPow3o2")]
            internal static extern void VmdPow3o2(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsPow2o3")]
            internal static extern void VsPow2o3(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdPow2o3")]
            internal static extern void VdPow2o3(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsPow2o3")]
            internal static extern void VmsPow2o3(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdPow2o3")]
            internal static extern void VmdPow2o3(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsPowx")]
            internal static extern void VsPowx(int n, float* a, float b, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdPowx")]
            internal static extern void VdPowx(int n, double* a, double b, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsPowx")]
            internal static extern void VmsPowx(int n, float* a, float b, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdPowx")]
            internal static extern void VmdPowx(int n, double* a, double b, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsPowr")]
            internal static extern void VsPowr(int n, float* a, float* b, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdPowr")]
            internal static extern void VdPowr(int n, double* a, double* b, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsPowr")]
            internal static extern void VmsPowr(int n, float* a, float* b, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdPowr")]
            internal static extern void VmdPowr(int n, double* a, double* b, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsSinCos")]
            internal static extern void VsSinCos(int n, float* a, float* r1, float* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdSinCos")]
            internal static extern void VdSinCos(int n, double* a, double* r1, double* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsSinCos")]
            internal static extern void VmsSinCos(int n, float* a, float* r1, float* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdSinCos")]
            internal static extern void VmdSinCos(int n, double* a, double* r1, double* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsLinearFrac")]
            internal static extern void VsLinearFrac(int n, float* a, float* b, float scalea, float shifta, float scaleb, float shiftb, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdLinearFrac")]
            internal static extern void VdLinearFrac(int n, double* a, double* b, double scalea, double shifta, double scaleb, double shiftb, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsLinearFrac")]
            internal static extern void VmsLinearFrac(int n, float* a, float* b, float scalea, float shifta, float scaleb, float shiftb, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdLinearFrac")]
            internal static extern void VmdLinearFrac(int n, double* a, double* b, double scalea, double shifta, double scaleb, double shiftb, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsCeil")]
            internal static extern void VsCeil(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdCeil")]
            internal static extern void VdCeil(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsCeil")]
            internal static extern void VmsCeil(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdCeil")]
            internal static extern void VmdCeil(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsFloor")]
            internal static extern void VsFloor(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdFloor")]
            internal static extern void VdFloor(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsFloor")]
            internal static extern void VmsFloor(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdFloor")]
            internal static extern void VmdFloor(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsFrac")]
            internal static extern void VsFrac(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdFrac")]
            internal static extern void VdFrac(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsFrac")]
            internal static extern void VmsFrac(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdFrac")]
            internal static extern void VmdFrac(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsModf")]
            internal static extern void VsModf(int n, float* a, float* r1, float* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdModf")]
            internal static extern void VdModf(int n, double* a, double* r1, double* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsModf")]
            internal static extern void VmsModf(int n, float* a, float* r1, float* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdModf")]
            internal static extern void VmdModf(int n, double* a, double* r1, double* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsFmod")]
            internal static extern void VsFmod(int n, float* a, float* r1, float* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdFmod")]
            internal static extern void VdFmod(int n, double* a, double* r1, double* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsFmod")]
            internal static extern void VmsFmod(int n, float* a, float* r1, float* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdFmod")]
            internal static extern void VmdFmod(int n, double* a, double* r1, double* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsRemainder")]
            internal static extern void VsRemainder(int n, float* a, float* r1, float* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdRemainder")]
            internal static extern void VdRemainder(int n, double* a, double* r1, double* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsRemainder")]
            internal static extern void VmsRemainder(int n, float* a, float* r1, float* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdRemainder")]
            internal static extern void VmdRemainder(int n, double* a, double* r1, double* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsNextAfter")]
            internal static extern void VsNextAfter(int n, float* a, float* r1, float* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdNextAfter")]
            internal static extern void VdNextAfter(int n, double* a, double* r1, double* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsNextAfter")]
            internal static extern void VmsNextAfter(int n, float* a, float* r1, float* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdNextAfter")]
            internal static extern void VmdNextAfter(int n, double* a, double* r1, double* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsCopySign")]
            internal static extern void VsCopySign(int n, float* a, float* r1, float* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdCopySign")]
            internal static extern void VdCopySign(int n, double* a, double* r1, double* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsCopySign")]
            internal static extern void VmsCopySign(int n, float* a, float* r1, float* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdCopySign")]
            internal static extern void VmdCopySign(int n, double* a, double* r1, double* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsFdim")]
            internal static extern void VsFdim(int n, float* a, float* r1, float* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdFdim")]
            internal static extern void VdFdim(int n, double* a, double* r1, double* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsFdim")]
            internal static extern void VmsFdim(int n, float* a, float* r1, float* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdFdim")]
            internal static extern void VmdFdim(int n, double* a, double* r1, double* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsFmax")]
            internal static extern void VsFmax(int n, float* a, float* r1, float* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdFmax")]
            internal static extern void VdFmax(int n, double* a, double* r1, double* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsFmax")]
            internal static extern void VmsFmax(int n, float* a, float* r1, float* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdFmax")]
            internal static extern void VmdFmax(int n, double* a, double* r1, double* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsFmin")]
            internal static extern void VsFmin(int n, float* a, float* r1, float* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdFmin")]
            internal static extern void VdFmin(int n, double* a, double* r1, double* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsFmin")]
            internal static extern void VmsFmin(int n, float* a, float* r1, float* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdFmin")]
            internal static extern void VmdFmin(int n, double* a, double* r1, double* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsMaxMag")]
            internal static extern void VsMaxMag(int n, float* a, float* r1, float* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdMaxMag")]
            internal static extern void VdMaxMag(int n, double* a, double* r1, double* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsMaxMag")]
            internal static extern void VmsMaxMag(int n, float* a, float* r1, float* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdMaxMag")]
            internal static extern void VmdMaxMag(int n, double* a, double* r1, double* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsMinMag")]
            internal static extern void VsMinMag(int n, float* a, float* r1, float* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdMinMag")]
            internal static extern void VdMinMag(int n, double* a, double* r1, double* r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsMinMag")]
            internal static extern void VmsMinMag(int n, float* a, float* r1, float* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdMinMag")]
            internal static extern void VmdMinMag(int n, double* a, double* r1, double* r2, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsNearbyInt")]
            internal static extern void VsNearbyInt(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdNearbyInt")]
            internal static extern void VdNearbyInt(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsNearbyInt")]
            internal static extern void VmsNearbyInt(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdNearbyInt")]
            internal static extern void VmdNearbyInt(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsRint")]
            internal static extern void VsRint(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdRint")]
            internal static extern void VdRint(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsRint")]
            internal static extern void VmsRint(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdRint")]
            internal static extern void VmdRint(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsRound")]
            internal static extern void VsRound(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdRound")]
            internal static extern void VdRound(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsRound")]
            internal static extern void VmsRound(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdRound")]
            internal static extern void VmdRound(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsTrunc")]
            internal static extern void VsTrunc(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdTrunc")]
            internal static extern void VdTrunc(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsTrunc")]
            internal static extern void VmsTrunc(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdTrunc")]
            internal static extern void VmdTrunc(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsExpInt1")]
            internal static extern void VsExpInt1(int n, float* a, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdExpInt1")]
            internal static extern void VdExpInt1(int n, double* a, double* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmsExpInt1")]
            internal static extern void VmsExpInt1(int n, float* a, float* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmdExpInt1")]
            internal static extern void VmdExpInt1(int n, double* a, double* r, long mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsPackI")]
            internal static extern void VsPackI(int n, float* a, int incra, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdPackI")]
            internal static extern void VdPackI(int n, double* a, int incra, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsPackV")]
            internal static extern void VsPackV(int n, float* a, int* ia, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdPackV")]
            internal static extern void VdPackV(int n, double* a, int* ia, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsPackM")]
            internal static extern void VsPackM(int n, float* a, int* ma, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdPackM")]
            internal static extern void VdPackM(int n, double* a, int* ma, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsUnpackI")]
            internal static extern void VsUnpackI(int n, float* a, float* y, int incry);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdUnpackI")]
            internal static extern void VdUnpackI(int n, double* a, double* y, int incry);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsUnpackV")]
            internal static extern void VsUnpackV(int n, float* a, float* y, int* iy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdUnpackV")]
            internal static extern void VdUnpackV(int n, double* a, double* y, int* iy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vsUnpackM")]
            internal static extern void VsUnpackM(int n, float* a, float* y, int* my);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vdUnpackM")]
            internal static extern void VdUnpackM(int n, double* a, double* y, int* my);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmlSetErrStatus")]
            internal static extern int VmlSetErrStatus(int status);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmlGetErrStatus")]
            internal static extern int VmlGetErrStatus();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmlClearErrStatus")]
            internal static extern int VmlClearErrStatus();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmlSetErrorCallBack")]
            internal static extern global::System.IntPtr VmlSetErrorCallBack(global::System.IntPtr func);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmlGetErrorCallBack")]
            internal static extern global::System.IntPtr VmlGetErrorCallBack();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmlClearErrorCallBack")]
            internal static extern global::System.IntPtr VmlClearErrorCallBack();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmlSetMode")]
            internal static extern uint VmlSetMode(uint newmode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vmlGetMode")]
            internal static extern uint VmlGetMode();
        }

        public static void VsAbs(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsAbs(n, __arg1, __arg2);
                }
            }
        }

        public static void VdAbs(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdAbs(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsAbs(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsAbs(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdAbs(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdAbs(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsAdd(int n, ref float a, ref float b, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsAdd(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdAdd(int n, ref double a, ref double b, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdAdd(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsAdd(int n, ref float a, ref float b, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsAdd(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdAdd(int n, ref double a, ref double b, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdAdd(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsSub(int n, ref float a, ref float b, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsSub(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdSub(int n, ref double a, ref double b, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdSub(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsSub(int n, ref float a, ref float b, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsSub(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdSub(int n, ref double a, ref double b, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdSub(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsInv(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsInv(n, __arg1, __arg2);
                }
            }
        }

        public static void VdInv(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdInv(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsInv(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsInv(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdInv(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdInv(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsSqrt(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsSqrt(n, __arg1, __arg2);
                }
            }
        }

        public static void VdSqrt(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdSqrt(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsSqrt(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsSqrt(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdSqrt(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdSqrt(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsInvSqrt(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsInvSqrt(n, __arg1, __arg2);
                }
            }
        }

        public static void VdInvSqrt(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdInvSqrt(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsInvSqrt(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsInvSqrt(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdInvSqrt(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdInvSqrt(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsCbrt(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsCbrt(n, __arg1, __arg2);
                }
            }
        }

        public static void VdCbrt(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdCbrt(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsCbrt(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsCbrt(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdCbrt(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdCbrt(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsInvCbrt(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsInvCbrt(n, __arg1, __arg2);
                }
            }
        }

        public static void VdInvCbrt(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdInvCbrt(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsInvCbrt(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsInvCbrt(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdInvCbrt(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdInvCbrt(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsSqr(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsSqr(n, __arg1, __arg2);
                }
            }
        }

        public static void VdSqr(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdSqr(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsSqr(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsSqr(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdSqr(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdSqr(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsExp(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsExp(n, __arg1, __arg2);
                }
            }
        }

        public static void VdExp(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdExp(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsExp(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsExp(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdExp(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdExp(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsExp2(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsExp2(n, __arg1, __arg2);
                }
            }
        }

        public static void VdExp2(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdExp2(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsExp2(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsExp2(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdExp2(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdExp2(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsExp10(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsExp10(n, __arg1, __arg2);
                }
            }
        }

        public static void VdExp10(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdExp10(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsExp10(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsExp10(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdExp10(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdExp10(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsExpm1(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsExpm1(n, __arg1, __arg2);
                }
            }
        }

        public static void VdExpm1(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdExpm1(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsExpm1(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsExpm1(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdExpm1(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdExpm1(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsLn(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsLn(n, __arg1, __arg2);
                }
            }
        }

        public static void VdLn(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdLn(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsLn(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsLn(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdLn(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdLn(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsLog2(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsLog2(n, __arg1, __arg2);
                }
            }
        }

        public static void VdLog2(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdLog2(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsLog2(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsLog2(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdLog2(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdLog2(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsLog10(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsLog10(n, __arg1, __arg2);
                }
            }
        }

        public static void VdLog10(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdLog10(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsLog10(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsLog10(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdLog10(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdLog10(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsLog1p(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsLog1p(n, __arg1, __arg2);
                }
            }
        }

        public static void VdLog1p(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdLog1p(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsLog1p(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsLog1p(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdLog1p(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdLog1p(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsLogb(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsLogb(n, __arg1, __arg2);
                }
            }
        }

        public static void VdLogb(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdLogb(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsLogb(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsLogb(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdLogb(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdLogb(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsCos(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsCos(n, __arg1, __arg2);
                }
            }
        }

        public static void VdCos(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdCos(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsCos(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsCos(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdCos(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdCos(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsSin(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsSin(n, __arg1, __arg2);
                }
            }
        }

        public static void VdSin(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdSin(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsSin(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsSin(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdSin(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdSin(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsTan(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsTan(n, __arg1, __arg2);
                }
            }
        }

        public static void VdTan(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdTan(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsTan(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsTan(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdTan(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdTan(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsCospi(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsCospi(n, __arg1, __arg2);
                }
            }
        }

        public static void VdCospi(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdCospi(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsCospi(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsCospi(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdCospi(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdCospi(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsSinpi(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsSinpi(n, __arg1, __arg2);
                }
            }
        }

        public static void VdSinpi(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdSinpi(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsSinpi(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsSinpi(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdSinpi(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdSinpi(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsTanpi(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsTanpi(n, __arg1, __arg2);
                }
            }
        }

        public static void VdTanpi(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdTanpi(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsTanpi(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsTanpi(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdTanpi(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdTanpi(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsCosd(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsCosd(n, __arg1, __arg2);
                }
            }
        }

        public static void VdCosd(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdCosd(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsCosd(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsCosd(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdCosd(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdCosd(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsSind(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsSind(n, __arg1, __arg2);
                }
            }
        }

        public static void VdSind(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdSind(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsSind(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsSind(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdSind(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdSind(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsTand(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsTand(n, __arg1, __arg2);
                }
            }
        }

        public static void VdTand(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdTand(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsTand(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsTand(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdTand(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdTand(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsCosh(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsCosh(n, __arg1, __arg2);
                }
            }
        }

        public static void VdCosh(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdCosh(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsCosh(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsCosh(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdCosh(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdCosh(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsSinh(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsSinh(n, __arg1, __arg2);
                }
            }
        }

        public static void VdSinh(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdSinh(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsSinh(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsSinh(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdSinh(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdSinh(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsTanh(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsTanh(n, __arg1, __arg2);
                }
            }
        }

        public static void VdTanh(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdTanh(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsTanh(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsTanh(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdTanh(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdTanh(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsAcos(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsAcos(n, __arg1, __arg2);
                }
            }
        }

        public static void VdAcos(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdAcos(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsAcos(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsAcos(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdAcos(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdAcos(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsAsin(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsAsin(n, __arg1, __arg2);
                }
            }
        }

        public static void VdAsin(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdAsin(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsAsin(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsAsin(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdAsin(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdAsin(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsAtan(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsAtan(n, __arg1, __arg2);
                }
            }
        }

        public static void VdAtan(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdAtan(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsAtan(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsAtan(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdAtan(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdAtan(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsAcospi(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsAcospi(n, __arg1, __arg2);
                }
            }
        }

        public static void VdAcospi(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdAcospi(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsAcospi(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsAcospi(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdAcospi(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdAcospi(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsAsinpi(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsAsinpi(n, __arg1, __arg2);
                }
            }
        }

        public static void VdAsinpi(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdAsinpi(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsAsinpi(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsAsinpi(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdAsinpi(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdAsinpi(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsAtanpi(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsAtanpi(n, __arg1, __arg2);
                }
            }
        }

        public static void VdAtanpi(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdAtanpi(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsAtanpi(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsAtanpi(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdAtanpi(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdAtanpi(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsAcosh(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsAcosh(n, __arg1, __arg2);
                }
            }
        }

        public static void VdAcosh(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdAcosh(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsAcosh(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsAcosh(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdAcosh(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdAcosh(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsAsinh(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsAsinh(n, __arg1, __arg2);
                }
            }
        }

        public static void VdAsinh(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdAsinh(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsAsinh(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsAsinh(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdAsinh(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdAsinh(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsAtanh(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsAtanh(n, __arg1, __arg2);
                }
            }
        }

        public static void VdAtanh(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdAtanh(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsAtanh(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsAtanh(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdAtanh(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdAtanh(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsErf(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsErf(n, __arg1, __arg2);
                }
            }
        }

        public static void VdErf(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdErf(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsErf(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsErf(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdErf(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdErf(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsErfInv(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsErfInv(n, __arg1, __arg2);
                }
            }
        }

        public static void VdErfInv(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdErfInv(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsErfInv(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsErfInv(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdErfInv(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdErfInv(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsHypot(int n, ref float a, ref float b, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsHypot(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdHypot(int n, ref double a, ref double b, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdHypot(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsHypot(int n, ref float a, ref float b, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsHypot(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdHypot(int n, ref double a, ref double b, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdHypot(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsErfc(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsErfc(n, __arg1, __arg2);
                }
            }
        }

        public static void VdErfc(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdErfc(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsErfc(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsErfc(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdErfc(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdErfc(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsErfcInv(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsErfcInv(n, __arg1, __arg2);
                }
            }
        }

        public static void VdErfcInv(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdErfcInv(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsErfcInv(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsErfcInv(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdErfcInv(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdErfcInv(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsCdfNorm(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsCdfNorm(n, __arg1, __arg2);
                }
            }
        }

        public static void VdCdfNorm(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdCdfNorm(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsCdfNorm(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsCdfNorm(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdCdfNorm(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdCdfNorm(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsCdfNormInv(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsCdfNormInv(n, __arg1, __arg2);
                }
            }
        }

        public static void VdCdfNormInv(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdCdfNormInv(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsCdfNormInv(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsCdfNormInv(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdCdfNormInv(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdCdfNormInv(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsLGamma(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsLGamma(n, __arg1, __arg2);
                }
            }
        }

        public static void VdLGamma(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdLGamma(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsLGamma(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsLGamma(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdLGamma(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdLGamma(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsTGamma(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsTGamma(n, __arg1, __arg2);
                }
            }
        }

        public static void VdTGamma(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdTGamma(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsTGamma(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsTGamma(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdTGamma(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdTGamma(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsAtan2(int n, ref float a, ref float b, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsAtan2(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdAtan2(int n, ref double a, ref double b, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdAtan2(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsAtan2(int n, ref float a, ref float b, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsAtan2(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdAtan2(int n, ref double a, ref double b, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdAtan2(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsAtan2pi(int n, ref float a, ref float b, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsAtan2pi(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdAtan2pi(int n, ref double a, ref double b, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdAtan2pi(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsAtan2pi(int n, ref float a, ref float b, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsAtan2pi(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdAtan2pi(int n, ref double a, ref double b, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdAtan2pi(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsMul(int n, ref float a, ref float b, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsMul(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdMul(int n, ref double a, ref double b, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdMul(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsMul(int n, ref float a, ref float b, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsMul(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdMul(int n, ref double a, ref double b, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdMul(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsDiv(int n, ref float a, ref float b, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsDiv(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdDiv(int n, ref double a, ref double b, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdDiv(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsDiv(int n, ref float a, ref float b, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsDiv(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdDiv(int n, ref double a, ref double b, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdDiv(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsPow(int n, ref float a, ref float b, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsPow(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdPow(int n, ref double a, ref double b, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdPow(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsPow(int n, ref float a, ref float b, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsPow(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdPow(int n, ref double a, ref double b, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdPow(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsPow3o2(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsPow3o2(n, __arg1, __arg2);
                }
            }
        }

        public static void VdPow3o2(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdPow3o2(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsPow3o2(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsPow3o2(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdPow3o2(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdPow3o2(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsPow2o3(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsPow2o3(n, __arg1, __arg2);
                }
            }
        }

        public static void VdPow2o3(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdPow2o3(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsPow2o3(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsPow2o3(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdPow2o3(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdPow2o3(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsPowx(int n, ref float a, float b, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr3 = &r)
                {
                    var __arg3 = __refParamPtr3;
                    __Internal.VsPowx(n, __arg1, b, __arg3);
                }
            }
        }

        public static void VdPowx(int n, ref double a, double b, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr3 = &r)
                {
                    var __arg3 = __refParamPtr3;
                    __Internal.VdPowx(n, __arg1, b, __arg3);
                }
            }
        }

        public static void VmsPowx(int n, ref float a, float b, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr3 = &r)
                {
                    var __arg3 = __refParamPtr3;
                    __Internal.VmsPowx(n, __arg1, b, __arg3, mode);
                }
            }
        }

        public static void VmdPowx(int n, ref double a, double b, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr3 = &r)
                {
                    var __arg3 = __refParamPtr3;
                    __Internal.VmdPowx(n, __arg1, b, __arg3, mode);
                }
            }
        }

        public static void VsPowr(int n, ref float a, ref float b, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsPowr(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdPowr(int n, ref double a, ref double b, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdPowr(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsPowr(int n, ref float a, ref float b, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsPowr(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdPowr(int n, ref double a, ref double b, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdPowr(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsSinCos(int n, ref float a, ref float r1, ref float r2)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsSinCos(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdSinCos(int n, ref double a, ref double r1, ref double r2)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdSinCos(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsSinCos(int n, ref float a, ref float r1, ref float r2, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsSinCos(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdSinCos(int n, ref double a, ref double r1, ref double r2, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdSinCos(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsLinearFrac(int n, ref float a, ref float b, float scalea, float shifta, float scaleb, float shiftb, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr7 = &r)
                    {
                        var __arg7 = __refParamPtr7;
                        __Internal.VsLinearFrac(n, __arg1, __arg2, scalea, shifta, scaleb, shiftb, __arg7);
                    }
                }
            }
        }

        public static void VdLinearFrac(int n, ref double a, ref double b, double scalea, double shifta, double scaleb, double shiftb, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr7 = &r)
                    {
                        var __arg7 = __refParamPtr7;
                        __Internal.VdLinearFrac(n, __arg1, __arg2, scalea, shifta, scaleb, shiftb, __arg7);
                    }
                }
            }
        }

        public static void VmsLinearFrac(int n, ref float a, ref float b, float scalea, float shifta, float scaleb, float shiftb, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr7 = &r)
                    {
                        var __arg7 = __refParamPtr7;
                        __Internal.VmsLinearFrac(n, __arg1, __arg2, scalea, shifta, scaleb, shiftb, __arg7, mode);
                    }
                }
            }
        }

        public static void VmdLinearFrac(int n, ref double a, ref double b, double scalea, double shifta, double scaleb, double shiftb, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &b)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr7 = &r)
                    {
                        var __arg7 = __refParamPtr7;
                        __Internal.VmdLinearFrac(n, __arg1, __arg2, scalea, shifta, scaleb, shiftb, __arg7, mode);
                    }
                }
            }
        }

        public static void VsCeil(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsCeil(n, __arg1, __arg2);
                }
            }
        }

        public static void VdCeil(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdCeil(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsCeil(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsCeil(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdCeil(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdCeil(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsFloor(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsFloor(n, __arg1, __arg2);
                }
            }
        }

        public static void VdFloor(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdFloor(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsFloor(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsFloor(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdFloor(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdFloor(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsFrac(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsFrac(n, __arg1, __arg2);
                }
            }
        }

        public static void VdFrac(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdFrac(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsFrac(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsFrac(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdFrac(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdFrac(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsModf(int n, ref float a, ref float r1, ref float r2)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsModf(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdModf(int n, ref double a, ref double r1, ref double r2)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdModf(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsModf(int n, ref float a, ref float r1, ref float r2, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsModf(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdModf(int n, ref double a, ref double r1, ref double r2, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdModf(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsFmod(int n, ref float a, ref float r1, ref float r2)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsFmod(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdFmod(int n, ref double a, ref double r1, ref double r2)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdFmod(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsFmod(int n, ref float a, ref float r1, ref float r2, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsFmod(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdFmod(int n, ref double a, ref double r1, ref double r2, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdFmod(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsRemainder(int n, ref float a, ref float r1, ref float r2)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsRemainder(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdRemainder(int n, ref double a, ref double r1, ref double r2)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdRemainder(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsRemainder(int n, ref float a, ref float r1, ref float r2, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsRemainder(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdRemainder(int n, ref double a, ref double r1, ref double r2, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdRemainder(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsNextAfter(int n, ref float a, ref float r1, ref float r2)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsNextAfter(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdNextAfter(int n, ref double a, ref double r1, ref double r2)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdNextAfter(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsNextAfter(int n, ref float a, ref float r1, ref float r2, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsNextAfter(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdNextAfter(int n, ref double a, ref double r1, ref double r2, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdNextAfter(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsCopySign(int n, ref float a, ref float r1, ref float r2)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsCopySign(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdCopySign(int n, ref double a, ref double r1, ref double r2)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdCopySign(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsCopySign(int n, ref float a, ref float r1, ref float r2, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsCopySign(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdCopySign(int n, ref double a, ref double r1, ref double r2, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdCopySign(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsFdim(int n, ref float a, ref float r1, ref float r2)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsFdim(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdFdim(int n, ref double a, ref double r1, ref double r2)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdFdim(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsFdim(int n, ref float a, ref float r1, ref float r2, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsFdim(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdFdim(int n, ref double a, ref double r1, ref double r2, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdFdim(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsFmax(int n, ref float a, ref float r1, ref float r2)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsFmax(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdFmax(int n, ref double a, ref double r1, ref double r2)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdFmax(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsFmax(int n, ref float a, ref float r1, ref float r2, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsFmax(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdFmax(int n, ref double a, ref double r1, ref double r2, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdFmax(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsFmin(int n, ref float a, ref float r1, ref float r2)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsFmin(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdFmin(int n, ref double a, ref double r1, ref double r2)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdFmin(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsFmin(int n, ref float a, ref float r1, ref float r2, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsFmin(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdFmin(int n, ref double a, ref double r1, ref double r2, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdFmin(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsMaxMag(int n, ref float a, ref float r1, ref float r2)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsMaxMag(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdMaxMag(int n, ref double a, ref double r1, ref double r2)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdMaxMag(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsMaxMag(int n, ref float a, ref float r1, ref float r2, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsMaxMag(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdMaxMag(int n, ref double a, ref double r1, ref double r2, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdMaxMag(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsMinMag(int n, ref float a, ref float r1, ref float r2)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsMinMag(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdMinMag(int n, ref double a, ref double r1, ref double r2)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdMinMag(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VmsMinMag(int n, ref float a, ref float r1, ref float r2, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmsMinMag(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VmdMinMag(int n, ref double a, ref double r1, ref double r2, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r1)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &r2)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VmdMinMag(n, __arg1, __arg2, __arg3, mode);
                    }
                }
            }
        }

        public static void VsNearbyInt(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsNearbyInt(n, __arg1, __arg2);
                }
            }
        }

        public static void VdNearbyInt(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdNearbyInt(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsNearbyInt(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsNearbyInt(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdNearbyInt(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdNearbyInt(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsRint(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsRint(n, __arg1, __arg2);
                }
            }
        }

        public static void VdRint(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdRint(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsRint(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsRint(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdRint(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdRint(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsRound(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsRound(n, __arg1, __arg2);
                }
            }
        }

        public static void VdRound(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdRound(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsRound(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsRound(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdRound(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdRound(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsTrunc(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsTrunc(n, __arg1, __arg2);
                }
            }
        }

        public static void VdTrunc(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdTrunc(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsTrunc(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsTrunc(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdTrunc(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdTrunc(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsExpInt1(int n, ref float a, ref float r)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsExpInt1(n, __arg1, __arg2);
                }
            }
        }

        public static void VdExpInt1(int n, ref double a, ref double r)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdExpInt1(n, __arg1, __arg2);
                }
            }
        }

        public static void VmsExpInt1(int n, ref float a, ref float r, long mode)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmsExpInt1(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VmdExpInt1(int n, ref double a, ref double r, long mode)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &r)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VmdExpInt1(n, __arg1, __arg2, mode);
                }
            }
        }

        public static void VsPackI(int n, ref float a, int incra, ref float y)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr3 = &y)
                {
                    var __arg3 = __refParamPtr3;
                    __Internal.VsPackI(n, __arg1, incra, __arg3);
                }
            }
        }

        public static void VdPackI(int n, ref double a, int incra, ref double y)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr3 = &y)
                {
                    var __arg3 = __refParamPtr3;
                    __Internal.VdPackI(n, __arg1, incra, __arg3);
                }
            }
        }

        public static void VsPackV(int n, ref float a, ref int ia, ref float y)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &ia)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &y)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsPackV(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdPackV(int n, ref double a, ref int ia, ref double y)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &ia)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &y)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdPackV(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VsPackM(int n, ref float a, ref int ma, ref float y)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &ma)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &y)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsPackM(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdPackM(int n, ref double a, ref int ma, ref double y)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &ma)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &y)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdPackM(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VsUnpackI(int n, ref float a, ref float y, int incry)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &y)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VsUnpackI(n, __arg1, __arg2, incry);
                }
            }
        }

        public static void VdUnpackI(int n, ref double a, ref double y, int incry)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &y)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.VdUnpackI(n, __arg1, __arg2, incry);
                }
            }
        }

        public static void VsUnpackV(int n, ref float a, ref float y, ref int iy)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &y)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &iy)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsUnpackV(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdUnpackV(int n, ref double a, ref double y, ref int iy)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &y)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &iy)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdUnpackV(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VsUnpackM(int n, ref float a, ref float y, ref int my)
        {
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &y)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &my)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VsUnpackM(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void VdUnpackM(int n, ref double a, ref double y, ref int my)
        {
            fixed (double* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &y)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &my)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VdUnpackM(n, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static int VmlSetErrStatus(int status)
        {
            var __ret = __Internal.VmlSetErrStatus(status);
            return __ret;
        }

        public static int VmlGetErrStatus()
        {
            var __ret = __Internal.VmlGetErrStatus();
            return __ret;
        }

        public static int VmlClearErrStatus()
        {
            var __ret = __Internal.VmlClearErrStatus();
            return __ret;
        }

        public static global::IntelMKL.VMLErrorCallBack VmlSetErrorCallBack(global::IntelMKL.VMLErrorCallBack func)
        {
            var __arg0 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
            var __ret = __Internal.VmlSetErrorCallBack(__arg0);
            var __ptr0 = __ret;
            return __ptr0 == IntPtr.Zero? null : (global::IntelMKL.VMLErrorCallBack) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::IntelMKL.VMLErrorCallBack));
        }

        public static global::IntelMKL.VMLErrorCallBack VmlGetErrorCallBack()
        {
            var __ret = __Internal.VmlGetErrorCallBack();
            var __ptr0 = __ret;
            return __ptr0 == IntPtr.Zero? null : (global::IntelMKL.VMLErrorCallBack) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::IntelMKL.VMLErrorCallBack));
        }

        public static global::IntelMKL.VMLErrorCallBack VmlClearErrorCallBack()
        {
            var __ret = __Internal.VmlClearErrorCallBack();
            var __ptr0 = __ret;
            return __ptr0 == IntPtr.Zero? null : (global::IntelMKL.VMLErrorCallBack) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::IntelMKL.VMLErrorCallBack));
        }

        public static uint VmlSetMode(uint newmode)
        {
            var __ret = __Internal.VmlSetMode(newmode);
            return __ret;
        }

        public static uint VmlGetMode()
        {
            var __ret = __Internal.VmlGetMode();
            return __ret;
        }
    }
}
